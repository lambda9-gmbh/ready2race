openapi: 3.1.0

info:
  title: Ready2Race Application API
  description: REST-like API for CSR application Ready2Race
  version: 0.0.1

paths:
  /login:
    post:
      operationId: userLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Successfully logged in, returns relevant user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginDto'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: checkUserLogin
      responses:
        200:
          description: Already logged in, returns relevant user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginDto'
        204:
          $ref: '#/components/responses/204'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: userLogout
      responses:
        204:
          $ref: '#/components/responses/204'
        500:
          $ref: '#/components/responses/500'

  /user:
    get:
      operationId: getUsers
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: User page successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AppUserDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /user/{userId}:
    get:
      operationId: getUser
      responses:
        200:
          description: User successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUserDto'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /user/registration:
    get:
      operationId: getRegistrations
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Registration page successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AppUserRegistrationDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    post:
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        204:
          description: Registration initiated
        400:
          $ref: '#/components/responses/400'
        409:
          $ref: '#/components/responses/409'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /user/registration/verify:
    post:
      operationId: verifyUserRegistration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyRegistrationRequest'
      responses:
        201:
          description: Registration completed, user added
        400:
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /user/invitation:
    get:
      operationId: getInvitations
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Invitation page successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AppUserInvitationDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    post:
      operationId: inviteUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteRequest'
      responses:
        204:
          description: Invitation initiated
        400:
          $ref: '#/components/responses/400'
        409:
          $ref: '#/components/responses/409'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /user/invitation/accept:
    post:
      operationId: acceptUserInvitation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptInvitationRequest'
      responses:
        201:
          description: Invitation accepted, user added
        400:
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /user/resetPassword:
    post:
      operationId: initPasswordReset
      parameters:
        - $ref: '#/components/parameters/challenge'
        - $ref: '#/components/parameters/input'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetInitRequest'
      responses:
        204:
          $ref: '#/components/responses/204'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
  /user/resetPassword/{passwordResetToken}:
    parameters:
      - in: path
        name: passwordResetToken
        required: true
        schema:
          type: string
    put:
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        204:
          $ref: '#/components/responses/204'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'


  /role:
    post:
      operationId: addRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequest'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getRoles
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Role page successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RoleDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /role/{roleId}:
    parameters:
      - in: path
        name: roleId
        required: true
        schema:
          type: string
    put:
      operationId: updateRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequest'
      responses:
        204:
          description: Event successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteRole
      responses:
        204:
          description: Role successfully deleted
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'

  /event:
    post:
      operationId: addEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequest'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getEvents
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Event page successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}:
    get:
      operationId: getEvent
      responses:
        200:
          description: Event successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDto'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: updateEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequest'
      responses:
        204:
          description: Event successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteEvent
      responses:
        204:
          description: Event successfully deleted
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/eventDay:
    post:
      operationId: addEventDay
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDayRequest'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getEventDays
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
        - name: raceId
          in: query
          schema:
            type: string
            format: uuid
          description: Optional parameter that filters by raceId
          required: false
      responses:
        200:
          description: EventDay page successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventDayDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/eventDay/{eventDayId}:
    get:
      operationId: getEventDay
      responses:
        200:
          description: EventDay successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDayDto'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: updateEventDay
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDayRequest'
      responses:
        204:
          description: EventDay successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteEventDay
      responses:
        204:
          description: EventDay successfully deleted
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/eventDay/{eventDayId}/races:
    put:
      operationId: assignRacesToEventDay
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignRacesToDayRequest'
      responses:
        204:
          description: Races successfully assigned to day
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/race:
    post:
      operationId: addRace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RaceRequest'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getRaces
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
        - name: eventDayId
          in: query
          schema:
            type: string
            format: uuid
          description: Optional parameter that filters by eventDayId
          required: false
      responses:
        200:
          description: Race page successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RaceDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/race/{raceId}:
    get:
      operationId: getRace
      responses:
        200:
          description: Race successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RaceDto'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: updateRace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RaceRequest'
      responses:
        204:
          description: Race successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteRace
      responses:
        204:
          description: Race successfully deleted
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/race/{raceId}/days:
    put:
      operationId: assignDaysToRace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignDaysToRaceRequest'
      responses:
        204:
          description: Days successfully assigned to race
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /raceTemplate:
    post:
      operationId: addRaceTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RaceTemplateRequest'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getRaceTemplates
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: RaceTemplate page successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RaceTemplateDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /raceTemplate/{raceTemplateId}:
    get:
      operationId: getRaceTemplate
      responses:
        200:
          description: RaceTemplate successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RaceTemplateDto'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: updateRaceTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RaceTemplateRequest'
      responses:
        204:
          description: RaceTemplate successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteRaceTemplate
      responses:
        204:
          description: RaceTemplate successfully deleted
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /namedParticipant:
    post:
      operationId: addNamedParticipant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamedParticipantRequest'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getNamedParticipants
      responses:
        200:
          description: NamedParticipant list successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/NamedParticipantDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /namedParticipant/{namedParticipantId}:
    put:
      operationId: updateNamedParticipant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamedParticipantRequest'
      responses:
        204:
          description: NamedParticipant successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteNamedParticipant
      responses:
        204:
          description: NamedParticipant successfully deleted
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
  /raceCategory:
    post:
      operationId: addRaceCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RaceCategoryRequest'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getRaceCategories
      responses:
        200:
          description: RaceCategory list successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RaceCategoryDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /raceCategory/{raceCategoryId}:
    put:
      operationId: updateRaceCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RaceCategoryRequest'
      responses:
        204:
          description: RaceCategory successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteRaceCategory
      responses:
        204:
          description: RaceCategory successfully deleted
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /captcha:
    post:
      operationId: newCaptcha
      responses:
        200:
          description: New Captcha successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptchaDto'
        500:
          $ref: '#/components/responses/500'







components:

  parameters:

    limit:
      name: limit
      in: query
      description: Page size for pagination
      required: false
      schema:
        type: integer

    offset:
      name: offset
      in: query
      description: Result offset for pagination
      required: false
      schema:
        type: integer

    sort:
      name: sort
      in: query
      description: "Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination"
      required: false
      schema:
        type: string

    search:
      name: search
      in: query
      description: Filter result with space-separated search terms for pagination
      required: false
      schema:
        type: string


    challenge:
      name: challenge
      in: query
      description: Captcha challenge id
      required: true
      schema:
        type: string
        format: uuid

    input:
      name: input
      in: query
      description: Captcha solution
      required: true
      schema:
        type: integer


  responses:

    201:
      description: Entity successfully created, returns the id
      content:
        application/json:
          schema:
            type: string
            format: uuid

    204:
      description: No Content

    400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'

    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'

    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'

    404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'

    409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'

    422:
      description: Unprocessable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'

    429:
      description: Too many requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'

    500:
      description: Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'

  schemas:

    # enums

    Action:
      type: string
      enum:
        - CREATE
        - READ
        - UPDATE
        - DELETE

    Resource:
      type: string
      enum:
        - USER
        - EVENT

    Scope:
      type: string
      enum:
        - OWN
        - GLOBAL

    EmailLanguage:
      type: string
      enum:
        - de
        - en



    # error

    ApiError:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: object
          required:
            - value
            - description
          properties:
            value:
              type: number
            description:
              type: string
        message:
          type: string
        details: { }


    # authentication / authorization

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    Privilege:
      type: object
      required:
        - action
        - resource
        - scope
      properties:
        action:
          $ref: '#/components/schemas/Action'
        resource:
          $ref: '#/components/schemas/Resource'
        scope:
          $ref: '#/components/schemas/Scope'

    PrivilegeDto:
      type: object
      required:
        - id
        - action
        - resource
        - scope
      properties:
        id:
          type: string
          format: uuid
        action:
          $ref: '#/components/schemas/Action'
        resource:
          $ref: '#/components/schemas/Resource'
        scope:
          $ref: '#/components/schemas/Scope'

    LoginDto:
      type: object
      required:
        - id
        - privileges
      properties:
        id:
          type: string
          format: uuid
        privileges:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegeDto'


    # pagination

    Pagination:
      type: object
      required:
        - total
        - limit
        - offset
        - sort
        - search
      properties:
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer
        sort:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        search:
          type: string

    Order:
      type: object
      required:
        - field
        - direction
      properties:
        field:
          type: string
        direction:
          type: string
          enum:
            - ASC
            - DESC

    # email

    AssignedEmailDto:
      type: object
      required:
        - recipient
      properties:
        recipient:
          type: string
        sentAt:
          type: string
          format: date-time
        lastErrorAt:
          type: string
          format: date-time
        lastError:
          type: string


    # user

    CreatedByDto:
      type: object
      required:
        - firstname
        - lastname
      properties:
        firstname:
          type: string
        lastname:
          type: string

    AppUserDto:
      type: object
      required:
        - id
        - email
        - firstname
        - lastname
        - roles
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleDto'

    AppUserRegistrationDto:
      type: object
      required:
        - id
        - email
        - firstname
        - lastname
        - language
        - expiresAt
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        language:
          $ref: '#/components/schemas/EmailLanguage'
        expiresAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        assignedEmail:
          $ref: '#/components/schemas/AssignedEmailDto'

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstname
        - lastname
        - language
        - callbackUrl
      properties:
        email:
          type: string
        password:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        language:
          $ref: '#/components/schemas/EmailLanguage'
        callbackUrl:
          type: string
          format: url

    VerifyRegistrationRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string

    AppUserInvitationDto:
      type: object
      required:
        - id
        - email
        - firstname
        - lastname
        - language
        - expiresAt
        - createdAt
        - roles
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        language:
          $ref: '#/components/schemas/EmailLanguage'
        expiresAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        assignedEmail:
          $ref: '#/components/schemas/AssignedEmailDto'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleDto'
        createdBy:
          $ref: '#/components/schemas/CreatedByDto'

    InviteRequest:
      type: object
      required:
        - email
        - firstname
        - lastname
        - language
        - roles
        - callbackUrl
      properties:
        email:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        language:
          $ref: '#/components/schemas/EmailLanguage'
        roles:
          type: array
          items:
            type: string
            format: uuid
        callbackUrl:
          type: string
          format: url

    AcceptInvitationRequest:
      type: object
      required:
        - token
        - password
      properties:
        token:
          type: string
        password:
          type: string


    PasswordResetInitRequest:
      type: object
      required:
        - email
        - language
        - callbackUrl
      properties:
        email:
          type: string
        language:
          $ref: '#/components/schemas/EmailLanguage'
        callbackUrl:
          type: string
          format: url

    PasswordResetRequest:
      type: object
      required:
        - password
      properties:
        password:
          type: string


    # role

    RoleDto:
      type: object
      required:
        - id
        - name
        - privileges
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        privileges:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegeDto'

    RoleRequest:
      type: object
      required:
        - name
        - privileges
      properties:
        name:
          type: string
        description:
          type: string
        privileges:
          type: array
          items:
            type: string
            format: uuid

    # event

    EventDto:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        location:
          type: string
        registrationAvailableFrom:
          type: string
          format: date-time
        registrationAvailableTo:
          type: string
          format: date-time
        invoicePrefix:
          type: string

    EventRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        location:
          type: string
        registrationAvailableFrom:
          type: string
          format: date-time
        registrationAvailableTo:
          type: string
          format: date-time
        invoicePrefix:
          type: string



    # eventDay

    EventDayDto:
      type: object
      required:
        - id
        - event
        - date
      properties:
        id:
          type: string
          format: uuid
        event:
          type: string
          format: uuid
        date:
          type: string
          format: date
        name:
          type: string
        description:
          type: string

    EventDayRequest:
      type: object
      required:
        - date
      properties:
        date:
          type: string
          format: date
        name:
          type: string
        description:
          type: string


    AssignRacesToDayRequest:
      type: object
      required:
        - races
      properties:
        races:
          type: array
          items:
            type: string
            format: uuid



    # raceProperties

    RacePropertiesDto:
      type: object
      required:
        - identifier
        - name
        - countMales
        - countFemales
        - countNonBinary
        - countMixed
        - participationFee
        - rentalFee
        - namedParticipants
      properties:
        identifier:
          type: string
        name:
          type: string
        shortName:
          type: string
        description:
          type: string
        countMales:
          type: integer
        countFemales:
          type: integer
        countNonBinary:
          type: integer
        countMixed:
          type: integer
        participationFee:
          type: string
          format: decimal
        rentalFee:
          type: string
          format: decimal
        raceCategory:
          $ref: '#/components/schemas/RaceCategoryDto'
        namedParticipants:
          type: array
          items:
            $ref: '#/components/schemas/NamedParticipantForRaceDto'


    NamedParticipantForRaceDto:
      type: object
      required:
        - id
        - name
        - required
        - countMales
        - countFemales
        - countNonBinary
        - countMixed
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        required:
          type: boolean
        countMales:
          type: integer
        countFemales:
          type: integer
        countNonBinary:
          type: integer
        countMixed:
          type: integer


    RacePropertiesRequestDto:
      type: object
      required:
        - identifier
        - name
        - countMales
        - countFemales
        - countNonBinary
        - countMixed
        - participationFee
        - rentalFee
        - namedParticipants
      properties:
        identifier:
          type: string
        name:
          type: string
        shortName:
          type: string
        description:
          type: string
        countMales:
          type: integer
        countFemales:
          type: integer
        countNonBinary:
          type: integer
        countMixed:
          type: integer
        participationFee:
          type: string
          format: decimal
        rentalFee:
          type: string
          format: decimal
        raceCategory:
          type: string
          format: uuid
        namedParticipants:
          type: array
          items:
            $ref: '#/components/schemas/NamedParticipantForRaceRequestDto'


    NamedParticipantForRaceRequestDto:
      type: object
      required:
        - namedParticipant
        - required
        - countMales
        - countFemales
        - countNonBinary
        - countMixed
      properties:
        namedParticipant:
          type: string
          format: uuid
        required:
          type: boolean
        countMales:
          type: integer
        countFemales:
          type: integer
        countNonBinary:
          type: integer
        countMixed:
          type: integer



    # race

    RaceDto:
      type: object
      required:
        - id
        - event
        - properties
      properties:
        id:
          type: string
          format: uuid
        event:
          type: string
          format: uuid
        properties:
          $ref: '#/components/schemas/RacePropertiesDto'
        template:
          type: string
          format: uuid


    RaceRequest:
      type: object
      required:
        - properties
      properties:
        properties:
          $ref: '#/components/schemas/RacePropertiesRequestDto'
        template:
          type: string
          format: uuid


    AssignDaysToRaceRequest:
      type: object
      required:
        - days
      properties:
        days:
          type: array
          items:
            type: string
            format: uuid



    # raceTemplate

    RaceTemplateDto:
      type: object
      required:
        - id
        - properties
      properties:
        id:
          type: string
          format: uuid
        properties:
          $ref: '#/components/schemas/RacePropertiesDto'


    RaceTemplateRequest:
      type: object
      required:
        - properties
      properties:
        properties:
          $ref: '#/components/schemas/RacePropertiesRequestDto'



    # namedParticipant

    NamedParticipantDto:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string

    NamedParticipantRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string


    # raceCategory

    RaceCategoryDto:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string

    RaceCategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string



    # captcha

    CaptchaDto:
      type: object
      required:
        - id
        - imgSrc
        - solutionMin
        - solutionMax
        - handleToHeightRatio
        - start
      properties:
        id:
          type: string
          format: uuid
        imgSrc:
          type: string
          format: base64
        solutionMin:
          type: integer
        solutionMax:
          type: integer
        handleToHeightRatio:
          type: number
        start:
          type: integer