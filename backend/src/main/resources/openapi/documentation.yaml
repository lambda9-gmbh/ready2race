openapi: 3.1.0

info:
  title: Ready2Race Application API
  description: REST-like API for CSR application Ready2Race
  version: 0.0.1

paths:
  /login:
    post:
      operationId: userLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Successfully logged in, returns relevant user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: checkUserLogin
      responses:
        200:
          description: Already logged in, returns relevant user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        204:
          $ref: '#/components/responses/204'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: userLogout
      responses:
        204:
          $ref: '#/components/responses/204'
        500:
          $ref: '#/components/responses/500'
  /event:
    post:
      operationId: addEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequest'
      responses:
        201:
          description: Event successfully created, returns event id
          content:
            text/plain:
              schema:
                type: string
                format: uuid
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getEvents
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Event page successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventPageResponse'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}:
    get:
      operationId: getEvent
      responses:
        200:
          description: Event successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventResponse'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: updateEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequest'
      responses:
        204:
          description: Event successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteEvent
      responses:
        204:
          description: Event successfully deleted
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/eventDay:
    post:
      operationId: addEventDay
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDayRequest'
      responses:
        201:
          description: EventDay successfully created, returns event id
          content:
            text/plain:
              schema:
                type: string
                format: uuid
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getEventDays
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: EventDay page successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventDayPageResponse'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/eventDay/{eventDayId}:
    get:
      operationId: getEventDay
      responses:
        200:
          description: EventDay successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventDayResponse'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: updateEventDay
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDayRequest'
      responses:
        204:
          description: EventDay successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteEventDay
      responses:
        204:
          description: EventDay successfully deleted
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/race:
    post:
      operationId: addRace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RaceRequest'
      responses:
        201:
          description: Race successfully created, returns event id
          content:
            text/plain:
              schema:
                type: string
                format: uuid
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getRaces
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Race page successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRacePageResponse'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/race/{raceId}:
    get:
      operationId: getRace
      responses:
        200:
          description: Race successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRaceResponse'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: updateRace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RaceRequest'
      responses:
        204:
          description: Race successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteRace
      responses:
        204:
          description: Race successfully deleted
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /namedParticipant:
    post:
      operationId: addNamedParticipant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamedParticipantDto'
      responses:
        204:
          description: NamedParticipant successfully created
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getNamedParticipants
      responses:
        200:
          description: NamedParticipant list successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NamedParticipantDto'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
  /namedParticipant/{name}:
    put:
      operationId: updateNamedParticipant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamedParticipantDto'
      responses:
        204:
          description: NamedParticipant successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteNamedParticipant
      responses:
        204:
          description: NamedParticipant successfully deleted
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /raceCategory:
    put:
      operationId: addRaceCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        204:
          description: RaceCategory successfully created
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getRaceCategory
      responses:
        200:
          description: RaceCategory list successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
  /raceCategory/{name}:
    put:
      operationId: updateRaceCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        204:
          description: RaceCategory successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteRaceCategory
      responses:
        204:
          description: RaceCategory successfully deleted
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'







components:

  parameters:

    limit:
      name: limit
      in: query
      description: Page size for pagination
      required: true
      schema:
        type: integer

    offset:
      name: offset
      in: query
      description: Result offset for pagination
      required: true
      schema:
        type: integer

    sort:
      name: sort
      in: query
      description: "Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination"
      required: true
      schema:
        type: string

    search:
      name: search
      in: query
      description: Filter result with space-separated search terms for pagination
      required: false
      schema:
        type: string

  responses:

    204:
      description: No Content

    400:
      description: Bad Request
      content:
        text/plain:
          schema:
            type: string

    401:
      description: Unauthorized
      content:
        text/plain:
          schema:
            type: string

    404:
      description: Not Found
      content:
        text/plain:
          schema:
            type: string

    409:
      description: Conflict
      content:
        text/plain:
          schema:
            type: string

    500:
      description: Server Error
      content:
        text/plain:
          schema:
            type: string

  schemas:

    # enums

    Privilege:
      type: string
      enum:
        - USER_VIEW
        - USER_EDIT
        - ROLE_VIEW
        - ROLE_EDIT
        - EVENT_EDIT
        - EVENT_VIEW

    # authentication

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    LoginResponse:
      type: object
      required:
        - privilegesGlobal
        - privilegesBound
      properties:
        privilegesGlobal:
          type: array
          items:
            $ref: '#/components/schemas/Privilege'
        privilegesBound:
          type: array
          items:
            $ref: '#/components/schemas/Privilege'

    # user

    AppUserProperties:
      type: object
      required:
        - email
        - firstname
        - lastname
        - roles
      properties:
        email:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        roles:
          type: array
          items:
            type: string
            format: uuid

    AppUserResponse:
      type: object
      required:
        - id
        - properties
      properties:
        id:
          type: string
          format: uuid
        properties:
          $ref: '#/components/schemas/AppUserProperties'

    # pagination

    Pagination:
      type: object
      required:
        - total
        - limit
        - offset
        - sort
        - search
      properties:
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer
        sort:
          type: array
          items:
            $ref: '#/components/schemas/Order'

    Order:
      type: object
      properties:
        field:
          type: string
        direction:
          type: string
          enum:
            - ASC
            - DESC


    # event

    EventProperties:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        location:
          type: string
        registrationAvailableFrom:
          type: string
          format: date-time
        registrationAvailableTo:
          type: string
          format: date-time
        paymentDueDate:
          type: string
          format: date-time
        invoicePrefix:
          type: string

    EventDto:
      type: object
      required:
        - id
        - properties
      properties:
        id:
          type: string
          format: uuid
        properties:
          $ref: '#/components/schemas/EventProperties'

    EventRequest:
      type: object
      required:
        - properties
      properties:
        properties:
          $ref: '#/components/schemas/EventProperties'

    GetEventPageResponse:
      type:
        object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EventDto'
        pagination:
          $ref: '#/components/schemas/Pagination'

    GetEventResponse:
      type:
        object
      required:
        - dto
      properties:
        dto:
          $ref: '#/components/schemas/EventDto'


    # eventDay

    EventDayProperties:
      type: object
      required:
        - date
      properties:
        date:
          type: string
          format: date
        name:
          type: string
        description:
          type: string


    EventDayDto:
      type: object
      required:
        - id
        - event
        - properties
      properties:
        id:
          type: string
          format: uuid
        eventId:
          type: string
          format: uuid
        properties:
          $ref: '#/components/schemas/EventDayProperties'

    EventDayRequest:
      type: object
      required:
        - properties
      properties:
        properties:
          $ref: '#/components/schemas/EventDayProperties'

    GetEventDayPageResponse:
      type:
        object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EventDayDto'
        pagination:
          $ref: '#/components/schemas/Pagination'

    GetEventDayResponse:
      type:
        object
      required:
        - dto
      properties:
        dto:
          $ref: '#/components/schemas/EventDayDto'


    # race

    RacePropertiesDto:
      type: object
      required:
        - identifier
        - name
        - countMales
        - countFemales
        - countNonBinary
        - countMixed
        - participationFee
        - rentalFee
      properties:
        identifier:
          type: string
        name:
          type: string
        shortName:
          type: string
        description:
          type: string
        countMales:
          type: integer
        countFemales:
          type: integer
        countNonBinary:
          type: integer
        countMixed:
          type: integer
        participationFee:
          type: number
        rentalFee:
          type: number
        raceCategory:
          type: string

    RacePropertiesHasNamedParticipantDto:
      type: object
      required:
        - namedParticipant
        - countMales
        - countFemales
        - countNonBinary
        - countMixed
      properties:
        namedParticipant:
          type: string
        countMales:
          type: integer
        countFemales:
          type: integer
        countNonBinary:
          type: integer
        countMixed:
          type: integer

    NamedParticipantWithCountDto:
      type: object
      required:
        - name
        - required
        - countMales
        - countFemales
        - countNonBinary
        - countMixed
      properties:
        name:
          type: string
        description:
          type: string
        required:
          type: boolean
        countMales:
          type: integer
        countFemales:
          type: integer
        countNonBinary:
          type: integer
        countMixed:
          type: integer

    RacePropertiesWithNamedParticipantListDto:
      type: object
      required:
        - raceProperties
        - namedParticipantList
      properties:
        raceProperties:
          $ref: '#/components/schemas/RacePropertiesDto'
        namedParticipantList:
          type: array
          items:
            $ref: '#/components/schemas/NamedParticipantWithCountDto'

    RaceDto:
      type: object
      required:
        - id
        - event
        - raceProperties
      properties:
        id:
          type: string
          format: uuid
        event:
          type: string
          format: uuid
        raceProperties:
          $ref: '#/components/schemas/RacePropertiesWithNamedParticipantListDto'
        template:
          type: string
          format: uuid


    RaceRequest:
      type: object
      required:
        - raceProperties
        - namedParticipantList
      properties:
        raceProperties:
          $ref: '#/components/schemas/RacePropertiesDto'
        template:
          type: string
          format: uuid
        namedParticipantList:
          type: array
          items:
            $ref: '#/components/schemas/RacePropertiesHasNamedParticipantDto'

    GetRacePageResponse:
      type:
        object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/RaceDto'
        pagination:
          $ref: '#/components/schemas/Pagination'

    GetRaceResponse:
      type:
        object
      required:
        - dto
      properties:
        dto:
          $ref: '#/components/schemas/RaceDto'


    # namedParticipant

    NamedParticipantDto:
      type:
        object
      required:
        - name
        - required
      properties:
        name:
          type: string
        description:
          type: string
        required:
          type: boolean
