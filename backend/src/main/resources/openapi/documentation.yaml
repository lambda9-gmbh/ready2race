openapi: 3.1.0

info:
  title: Ready2Race Application API
  description: REST-like API for CSR application Ready2Race
  version: 0.0.1

paths:
  /login:
    post:
      operationId: userLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Successfully logged in, returns relevant user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginDto'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: checkUserLogin
      responses:
        200:
          description: Already logged in, returns relevant user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginDto'
        204:
          $ref: '#/components/responses/204'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: userLogout
      responses:
        204:
          $ref: '#/components/responses/204'
        500:
          $ref: '#/components/responses/500'

  /privileges:
    get:
      operationId: getPrivileges
      responses:
        200:
          description: All system privileges
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PrivilegeDto'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'

  /user:
    get:
      operationId: getUsers
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
        - name: noClub
          in: query
          schema:
            type: boolean
          description: Optional parameter that filters users that have a club assigned to them
          required: false
      responses:
        200:
          description: User page successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AppUserDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /user/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getUser
      responses:
        200:
          description: User successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUserDto'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAppUserRequest'
      responses:
        204:
          description: User successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /user/registration:
    post:
      operationId: registerUser
      parameters:
        - $ref: '#/components/parameters/challenge'
        - $ref: '#/components/parameters/input'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        204:
          description: Registration initiated
        400:
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getRegistrations
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Registration page successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AppUserRegistrationDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /user/registration/verify:
    post:
      operationId: verifyUserRegistration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyRegistrationRequest'
      responses:
        201:
          description: Registration completed, user added
        400:
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /user/invitation:
    post:
      operationId: inviteUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteRequest'
      responses:
        204:
          description: Invitation initiated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getInvitations
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Invitation page successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AppUserInvitationDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /user/invitation/accept:
    post:
      operationId: acceptUserInvitation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptInvitationRequest'
      responses:
        201:
          description: Invitation accepted, user added
        400:
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /user/resetPassword:
    post:
      operationId: initPasswordReset
      parameters:
        - $ref: '#/components/parameters/challenge'
        - $ref: '#/components/parameters/input'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetInitRequest'
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'
        422:
          $ref: '#/components/responses/422'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
  /user/resetPassword/{passwordResetToken}:
    parameters:
      - name: passwordResetToken
        in: path
        required: true
        schema:
          type: string
    put:
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'


  /role:
    post:
      operationId: addRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequest'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getRoles
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Role page successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RoleDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /role/{roleId}:
    parameters:
      - name: roleId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    put:
      operationId: updateRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequest'
      responses:
        204:
          description: Event successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteRole
      responses:
        204:
          description: Role successfully deleted
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'

  /event:
    post:
      operationId: addEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequest'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getEvents
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Event page successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /event/public:
    get:
      operationId: getPublicEvents
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Event page successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventPublicDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /event/registration:
    get:
      operationId: getEventRegistrations
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Event Registration page successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventRegistrationViewDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}:
    parameters:
      - $ref: '#/components/parameters/eventId'
    get:
      operationId: getEvent
      responses:
        200:
          description: Event successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDto'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: updateEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequest'
      responses:
        204:
          description: Event successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteEvent
      responses:
        204:
          description: Event successfully deleted
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/eventDay:
    parameters:
      - $ref: '#/components/parameters/eventId'
    post:
      operationId: addEventDay
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDayRequest'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getEventDays
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
        - name: competitionId
          in: query
          schema:
            type: string
            format: uuid
          description: Optional parameter that filters by competitionId
          required: false
      responses:
        200:
          description: EventDay page successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventDayDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/eventDay/{eventDayId}:
    parameters:
      - $ref: '#/components/parameters/eventId'
      - $ref: '#/components/parameters/eventDayId'
    get:
      operationId: getEventDay
      responses:
        200:
          description: EventDay successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDayDto'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: updateEventDay
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDayRequest'
      responses:
        204:
          description: EventDay successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteEventDay
      responses:
        204:
          description: EventDay successfully deleted
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/eventDay/{eventDayId}/competitions:
    parameters:
      - $ref: '#/components/parameters/eventId'
      - $ref: '#/components/parameters/eventDayId'
    put:
      operationId: assignCompetitionsToEventDay
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignCompetitionsToDayRequest'
      responses:
        204:
          description: Competitions successfully assigned to day
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/competition:
    parameters:
      - $ref: '#/components/parameters/eventId'
    post:
      operationId: addCompetition
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetitionRequest'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getCompetitions
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
        - name: eventDayId
          in: query
          schema:
            type: string
            format: uuid
          description: Optional parameter that filters by eventDayId
          required: false
      responses:
        200:
          description: Competition page successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CompetitionDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/competition/{competitionId}:
    parameters:
      - $ref: '#/components/parameters/eventId'
      - $ref: '#/components/parameters/competitionId'
    get:
      operationId: getCompetition
      responses:
        200:
          description: Competition successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetitionDto'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: updateCompetition
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetitionRequest'
      responses:
        204:
          description: Competition successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteCompetition
      responses:
        204:
          description: Competition successfully deleted
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/competition/{competitionId}/days:
    parameters:
      - $ref: '#/components/parameters/eventId'
      - $ref: '#/components/parameters/competitionId'
    put:
      operationId: assignDaysToCompetition
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignDaysToCompetitionRequest'
      responses:
        204:
          description: Days successfully assigned to competition
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/competition/{competitionId}/competitionRegistration:
    parameters:
      - $ref: '#/components/parameters/eventId'
      - $ref: '#/components/parameters/competitionId'
    get:
      operationId: getCompetitionRegistrations
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: CompetitionRegistration page successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CompetitionRegistrationTeamDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    post:
      operationId: addCompetitionRegistration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetitionRegistrationTeamUpsertDto'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/competition/{competitionId}/competitionRegistration/{competitionRegistrationId}:
    parameters:
      - $ref: '#/components/parameters/eventId'
      - $ref: '#/components/parameters/competitionId'
      - $ref: '#/components/parameters/competitionRegistrationId'
    put:
      operationId: updateCompetitionRegistration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetitionRegistrationTeamUpsertDto'
      responses:
        204:
          description: Competition registration successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteCompetitionRegistration
      responses:
        204:
          description: CompetitionRegistration successfully deleted
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/competition/{competitionId}/competitionSetup:
    parameters:
      - $ref: '#/components/parameters/eventId'
      - $ref: '#/components/parameters/competitionId'
    put:
      operationId: updateCompetitionSetup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetitionSetupDto'
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getCompetitionSetup
      responses:
        200:
          description: CompetitionSetup successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetitionSetupDto'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/competition/{competitionId}/competitionExecution:
    parameters:
      - $ref: '#/components/parameters/eventId'
      - $ref: '#/components/parameters/competitionId'
    get:
      operationId: getCompetitionExecutionProgress
      responses:
        200:
          description: Competition execution progress successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetitionExecutionProgressDto'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteCurrentCompetitionExecutionRound
      responses:
        204:
          description: Current competition execution round successfully deleted
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/competition/{competitionId}/competitionExecution/createNextRound:
    parameters:
      - $ref: '#/components/parameters/eventId'
      - $ref: '#/components/parameters/competitionId'
    post:
      operationId: createNextCompetitionRound
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/competition/{competitionId}/competitionExecution/{competitionMatchId}/data:
    parameters:
      - $ref: '#/components/parameters/eventId'
      - $ref: '#/components/parameters/competitionId'
      - name: competitionMatchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    put:
      operationId: updateMatchData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCompetitionMatchRequest'
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/competition/{competitionId}/competitionExecution/{competitionMatchId}/results:
    parameters:
      - $ref: '#/components/parameters/eventId'
      - $ref: '#/components/parameters/competitionId'
      - name: competitionMatchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    put:
      operationId: updateMatchResults
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCompetitionMatchResultRequest'
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'

  /event/{eventId}/eventDocument:
    parameters:
      - $ref: '#/components/parameters/eventId'
    post:
      operationId: addDocuments
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                documentType:
                  type: string
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getDocuments
      parameters:
        - name: documentType
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Retrieved event documents
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventDocumentDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/eventDocument/{eventDocumentId}:
    parameters:
      - $ref: '#/components/parameters/eventId'
      - name: eventDocumentId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: downloadDocument
      responses:
        200:
          description: File retrieved
          headers:
            Content-Disposition:
              schema:
                type: string
          content:
            '*/*':
              schema:
                type: string
                format: binary
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: updateDocument
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDocumentRequest'
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteDocument
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /competitionTemplate:
    post:
      operationId: addCompetitionTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetitionTemplateRequest'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getCompetitionTemplates
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: CompetitionTemplate page successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CompetitionTemplateDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /competitionTemplate/{competitionTemplateId}:
    parameters:
      - name: competitionTemplateId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getCompetitionTemplate
      responses:
        200:
          description: CompetitionTemplate successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetitionTemplateDto'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: updateCompetitionTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetitionTemplateRequest'
      responses:
        204:
          description: CompetitionTemplate successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteCompetitionTemplate
      responses:
        204:
          description: CompetitionTemplate successfully deleted
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /competitionCategory:
    post:
      operationId: addCompetitionCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetitionCategoryRequest'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getCompetitionCategories
      responses:
        200:
          description: CompetitionCategory list successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CompetitionCategoryDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /competitionCategory/{competitionCategoryId}:
    parameters:
      - name: competitionCategoryId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    put:
      operationId: updateCompetitionCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetitionCategoryRequest'
      responses:
        204:
          description: CompetitionCategory successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteCompetitionCategory
      responses:
        204:
          description: CompetitionCategory successfully deleted
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
  /namedParticipant:
    post:
      operationId: addNamedParticipant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamedParticipantRequest'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getNamedParticipants
      responses:
        200:
          description: NamedParticipant list successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/NamedParticipantDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /namedParticipant/{namedParticipantId}:
    parameters:
      - name: namedParticipantId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    put:
      operationId: updateNamedParticipant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamedParticipantRequest'
      responses:
        204:
          description: NamedParticipant successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteNamedParticipant
      responses:
        204:
          description: NamedParticipant successfully deleted
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
  /captcha:
    post:
      operationId: newCaptcha
      responses:
        200:
          description: New Captcha successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptchaDto'
        500:
          $ref: '#/components/responses/500'
  /club:
    post:
      operationId: addClub
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClubUpsertDto'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getClubs
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Club page successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ClubDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /club/{clubId}:
    parameters:
      - in: path
        name: clubId
        required: true
        schema:
          type: string
    get:
      operationId: getClub
      responses:
        200:
          description: Club successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClubDto'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: updateClub
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClubUpsertDto'
      responses:
        204:
          description: Club successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteClub
      responses:
        204:
          description: Club successfully deleted
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /club/{clubId}/user:
    parameters:
      - in: path
        name: clubId
        required: true
        schema:
          type: string
    get:
      operationId: getClubUsers
      responses:
        200:
          description: User list successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppUserDto'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /club/{clubId}/participant:
    parameters:
      - in: path
        name: clubId
        required: true
        schema:
          type: string
    get:
      operationId: getClubParticipants
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Participant page successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ParticipantDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    post:
      operationId: addClubParticipant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantUpsertDto'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /club/{clubId}/participant/{participantId}:
    parameters:
      - in: path
        name: clubId
        required: true
        schema:
          type: string
      - in: path
        name: participantId
        required: true
        schema:
          type: string
    get:
      operationId: getClubParticipant
      responses:
        200:
          description: Participant successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantDto'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: updateClubParticipant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantUpsertDto'
      responses:
        204:
          description: Participant successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteClubParticipant
      responses:
        204:
          description: Participant successfully deleted
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'

  /club/search:
    get:
      operationId: getClubNames
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
        - in: query
          name: eventId
          description: Filter for clubs, which registered for this event
          required: false
          schema:
            type: string
      responses:
        200:
          description: Club page successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ClubSearchDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /event/{eventId}/eventRegistration:
    parameters:
      - in: path
        name: eventId
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getRegistrationsForEvent
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Registration page for event retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventRegistrationViewDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /event/{eventId}/eventRegistration/{eventRegistrationId}:
    parameters:
      - in: path
        name: eventId
        required: true
        schema:
          type: string
          format: uuid
      - in: path
        name: eventRegistrationId
        required: true
        schema:
          type: string
          format: uuid
    delete:
      operationId: deleteEventRegistration
      responses:
        204:
          description: Event registration successfully deleted
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'

  /event/{eventId}/registrationTemplate:
    parameters:
      - $ref: '#/components/parameters/eventId'
    get:
      operationId: getEventRegistrationTemplate
      responses:
        200:
          description: EventRegistrationTemplate successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventRegistrationTemplateDto'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'

  /event/{eventId}/register:
    parameters:
      - $ref: '#/components/parameters/eventId'
    post:
      operationId: addEventRegistration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRegistrationUpsertDto'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'

  /event/{eventId}/finalizeRegistrations:
    parameters:
      - $ref: '#/components/parameters/eventId'
      - in: query
        name: keepNumbers
        description: Whether already set team numbers should be kept
        required: false
        schema:
          type: boolean
    post:
      operationId: finalizeRegistrations
      responses:
        204:
          description: Registrations successfully finalized
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'


  /event/{eventId}/missingTeamNumbers:
    parameters:
      - $ref: '#/components/parameters/eventId'
    get:
      operationId: getRegistrationsWithoutTeamNumber
      responses:
        200:
          description: List of registrations with missing team numbers successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompetitionRegistrationsWithoutTeamNumberDto'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'

  /event/{eventId}/registrationResult:
    parameters:
      - $ref: '#/components/parameters/eventId'
    get:
      operationId: getRegistrationResult
      responses:
        200:
          description: Report for event registrations successfully retrieved/generated
          headers:
            Content-Disposition:
              schema:
                type: string
          content:
            '*/*':
              schema:
                type: string
                format: binary
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'

  /fee:
    post:
      operationId: addFee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeeRequest'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getFees
      responses:
        200:
          description: Fee list successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FeeDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /fee/{feeId}:
    parameters:
      - name: feeId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    put:
      operationId: updateFee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeeRequest'
      responses:
        204:
          description: Fee successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteFee
      responses:
        204:
          description: Fee successfully deleted
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
  /eventDocumentType:
    post:
      operationId: addDocumentType
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDocumentTypeRequest'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getDocumentTypes
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: document type list retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventDocumentTypeDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /eventDocumentType/{eventDocumentTypeId}:
    parameters:
      - name: eventDocumentTypeId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    put:
      operationId: updateDocumentType
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDocumentTypeRequest'
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteDocumentType
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/participantRequirement:
    parameters:
      - $ref: '#/components/parameters/eventId'
    get:
      operationId: getParticipantRequirementsForEvent
      responses:
        200:
          description: ParticipantRequirementForEvent list successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ParticipantRequirementForEventDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    post:
      operationId: checkParticipantRequirementsForEvent
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                config:
                  type: object
                  $ref: '#/components/schemas/ParticipantRequirementCheckForEventConfigDto'
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/participantRequirement/approve:
    parameters:
      - $ref: '#/components/parameters/eventId'
    post:
      operationId: approveParticipantRequirementsForEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantRequirementCheckForEventUpsertDto'
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/participantRequirement/active:
    parameters:
      - $ref: '#/components/parameters/eventId'
    get:
      operationId: getActiveParticipantRequirementsForEvent
      responses:
        200:
          description: ParticipantRequirementForEvent list successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ParticipantRequirementForEventDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'

  /event/{eventId}/participantRequirement/{participantRequirementId}:
    parameters:
      - $ref: '#/components/parameters/eventId'
      - name: participantRequirementId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: activateParticipantRequirementForEvent
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: removeParticipantRequirementForEvent
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/participant:
    parameters:
      - $ref: '#/components/parameters/eventId'
    get:
      operationId: getParticipantsForEvent
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Participant page successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ParticipantForEventDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /participantRequirement/{participantRequirementId}:
    parameters:
      - name: participantRequirementId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    put:
      operationId: updateParticipantRequirement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantRequirementUpsertDto'
      responses:
        204:
          description: ParticipantRequirement successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteParticipantRequirement
      responses:
        204:
          description: ParticipantRequirement successfully deleted
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
  /participantRequirement:
    post:
      operationId: addParticipantRequirement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantRequirementUpsertDto'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getParticipantRequirements
      responses:
        200:
          description: ParticipantRequirement list successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ParticipantRequirementDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /competitionSetupTemplate:
    post:
      operationId: addCompetitionSetupTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetitionSetupTemplateRequest'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getCompetitionSetupTemplates
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: CompetitionSetupTemplate page successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CompetitionSetupTemplateDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /competitionSetupTemplate/{competitionSetupTemplateId}:
    parameters:
      - name: competitionSetupTemplateId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getCompetitionSetupTemplate
      responses:
        200:
          description: CompetitionSetupTemplate successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetitionSetupTemplateDto'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: updateCompetitionSetupTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetitionSetupTemplateRequest'
      responses:
        204:
          description: CompetitionSetupTemplate successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteCompetitionSetupTemplate
      responses:
        204:
          description: CompetitionSetupTemplate successfully deleted
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'

  /documentTemplate:
    get:
      operationId: getDocumentTemplates
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Document templates page successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentTemplateDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    post:
      operationId: addDocumentTemplate
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - request
                - files
              properties:
                request:
                  $ref: '#/components/schemas/DocumentTemplateRequest'
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        204:
          $ref: '#/components/responses/204'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'

  /documentTemplateType:
    get:
      operationId: getDocumentTemplateTypes
      responses:
        200:
          description: Document types successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocumentTypeDto'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'

  /documentTemplateType/{documentType}/assignTemplate:
    parameters:
      - in: path
        name: documentType
        required: true
        schema:
          $ref: '#/components/schemas/DocumentType'
    put:
      operationId: assignDocumentTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignDocumentTemplateRequest'
      responses:
        204:
          description: Successfully assigned template to document type
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'

  /event/{eventId}/task:
    parameters:
      - $ref: '#/components/parameters/eventId'
    post:
      operationId: addTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpsertDto'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getTasks
      responses:
        200:
          description: Task list successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /event/{eventId}/task/{taskId}:
    parameters:
      - name: taskId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - $ref: '#/components/parameters/eventId'
    put:
      operationId: updateTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpsertDto'
      responses:
        204:
          description: Task successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteTask
      responses:
        204:
          description: Task successfully deleted
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /user/{userId}/task:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
    get:
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      operationId: getOpenTasksForUser
      responses:
        200:
          description: Task list successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'

  /bankAccount:
    get:
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      operationId: getBankAccounts
      responses:
        200:
          description: Bank accounts page successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BankAccountDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    post:
      operationId: addBankAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankAccountRequest'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /bankAccount/{bankAccountId}:
    parameters:
      - in: path
        name: bankAccountId
        required: true
        schema:
          type: string
          format: uuid
    put:
      operationId: updateBankAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankAccountRequest'
      responses:
        204:
          description: Bank account successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteBankAccount
      responses:
        204:
          description: Bank account successfully deleted
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
  /assignedBankAccount:
    get:
      operationId: getAssignedBankAccount
      parameters:
        - in: query
          required: false
          name: event
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Assigned bank account retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignedBankAccountDto'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'

    put:
      operationId: assignBankAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignBankAccountRequest'
      responses:
        204:
          description: Bank account successfully assigned
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'

  /event/{eventId}/produceInvoices:
    parameters:
      - $ref: '#/components/parameters/eventId'
    post:
      operationId: produceInvoicesForEventRegistrations
      responses:
        204:
          description: invoice produce jobs successfully created
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /contact:
    get:
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      operationId: getContacts
      responses:
        200:
          description: contacts page retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ContactInformationDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    post:
      operationId: addContact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactInformationRequest'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /contact/{contactId}:
    parameters:
      - in: path
        name: contactId
        required: true
        schema:
          type: string
          format: uuid
    put:
      operationId: updateContact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactInformationRequest'
      responses:
        204:
          description: contact information successfully changed
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteContact
      responses:
        204:
          description: contact information successfully deleted
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'

  /assignedContact:
    get:
      operationId: getAssignedContact
      parameters:
        - in: query
          required: false
          name: event
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Assigned contact info retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignedContactInformationDto'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'

    put:
      operationId: assignContact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignContactInformationRequest'
      responses:
        204:
          description: contact successfully assigned
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'

  /worktype:
    post:
      operationId: addWorkType
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkTypeUpsertDto'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getWorkTypes
      responses:
        200:
          description: WorkType list successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkTypeDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
  /worktype/{workTypeId}:
    parameters:
      - name: workTypeId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    put:
      operationId: updateWorkType
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkTypeUpsertDto'
      responses:
        204:
          description: WorkType successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteWorkType
      responses:
        204:
          description: WorkType successfully deleted
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  event/{eventId}/workshift:
    parameters:
      - name: eventId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      operationId: addWorkShift
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkShiftUpsertDto'
      responses:
        201:
          $ref: '#/components/responses/201'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    get:
      operationId: getWorkShifts
      parameters:
        - name: timeFrom
          in: query
          required: false
          schema:
            type: string
            format: datetime
        - name: timeTo
          in: query
          required: false
          schema:
            type: string
            format: datetime
      responses:
        200:
          description: WorkShift list successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkShiftWithAssignedUsersDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'

  event/{eventId}/workshift/{workShiftId}:
    parameters:
      - name: workShiftId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: eventId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    put:
      operationId: updateWorkShift
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkShiftUpsertDto'
      responses:
        204:
          description: WorkShift successfully updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteWorkShift
      responses:
        204:
          description: WorkShift successfully deleted
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

  /user/{userId}/workshift:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: timeFrom
        in: query
        required: false
        schema:
          type: string
          format: datetime
      - name: timeTo
        in: query
        required: false
        schema:
          type: string
          format: datetime
    get:
      operationId: getWorkShiftsForUser
      responses:
        200:
          description: Shifts list successfully retrieved
          content:
            application/json:
              schema:
                type:
                  object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkShiftWithAssignedUsersDto'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'

components:

  parameters:

    # query

    limit:
      name: limit
      in: query
      description: Page size for pagination
      required: false
      schema:
        type: integer

    offset:
      name: offset
      in: query
      description: Result offset for pagination
      required: false
      schema:
        type: integer

    sort:
      name: sort
      in: query
      description: "Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination"
      required: false
      schema:
        type: string

    search:
      name: search
      in: query
      description: Filter result with space-separated search terms for pagination
      required: false
      schema:
        type: string


    challenge:
      name: challenge
      in: query
      description: Captcha challenge id
      required: true
      schema:
        type: string
        format: uuid

    input:
      name: input
      in: query
      description: Captcha solution
      required: true
      schema:
        type: integer


    # path params

    eventId:
      name: eventId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    eventDayId:
      name: eventDayId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    competitionId:
      name: competitionId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    competitionRegistrationId:
      name: competitionRegistrationId
      in: path
      required: true
      schema:
        type: string
        format: uuid



  responses:

    201:
      description: Entity successfully created, returns the id
      content:
        application/json:
          schema:
            type: string
            format: uuid

    204:
      description: No Content

    400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestError'

    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'

    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'

    404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'

    409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'

    422:
      description: Unprocessable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnprocessableEntityError'

    429:
      description: Too many requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsError'

    500:
      description: Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'


    409EmailInUse:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnprocessableEntityError'

  schemas:

    # enums

    Action:
      type: string
      enum:
        - CREATE
        - READ
        - UPDATE
        - DELETE

    Resource:
      type: string
      enum:
        - USER
        - EVENT
        - CLUB
        - REGISTRATION

    Scope:
      type: string
      enum:
        - OWN
        - GLOBAL

    EmailLanguage:
      type: string
      enum:
        - DE
        - EN

    ErrorCode:
      type: string
      enum:
        - CAPTCHA_WRONG
        - EMAIL_IN_USE
        - CANNOT_ASSIGN_ROLES

    Gender:
      type: string
      enum:
        - M
        - F
        - D

    # error

    ApiError:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: object
          required:
            - value
            - description
          properties:
            value:
              type: number
            description:
              type: string
        message:
          type: string
        errorCode:
          $ref: '#/components/schemas/ErrorCode'


    BadRequestError:
      allOf:
        - $ref: '#/components/schemas/ApiError'
        - type: object
          properties:
            details:
              type: object
              properties:
                validExample: { }


    UnprocessableEntityError:
      allOf:
        - $ref: '#/components/schemas/ApiError'
        - type: object
          required:
            - details
          properties:
            details:
              oneOf:
                - type: object
                  required:
                    - reason
                  properties:
                    reason:
                      $ref: '#/components/schemas/Invalid'
                - type: object
                  required:
                    - result
                  properties:
                    result:
                      $ref: '#/components/schemas/Invalid'


    TooManyRequestsError:
      allOf:
        - $ref: '#/components/schemas/ApiError'
        - type: object
          required:
            - details
          properties:
            details:
              type: object
              required:
                - retryAfter
              properties:
                retryAfter:
                  type: integer

    Invalid:
      oneOf:
        - type: string
        - type: object
          required:
            - field
            - error
          properties:
            field:
              type: string
            error:
              $ref: '#/components/schemas/Invalid'
        - type: object
          required:
            - errorPositions
          properties:
            errorPositions: { }
        - $ref: '#/components/schemas/Duplicate'
        - type: object
          required:
            - duplicates
          properties:
            duplicates:
              type: array
              items:
                $ref: '#/components/schemas/Duplicate'
        - type: object
          required:
            - value
            - pattern
          properties:
            value:
              type: string
            pattern:
              type: string
        - type: object
          required:
            - allOf
          properties:
            allOf:
              type: array
              items:
                $ref: '#/components/schemas/Invalid'
        - type: object
          required:
            - anyOf
          properties:
            anyOf:
              type: array
              items:
                $ref: '#/components/schemas/Invalid'
        - type: object
          required:
            - oneOf
          properties:
            oneOf:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/Invalid'
                  - type: object



    Duplicate:
      type: object
      required:
        - value
        - count
      properties:
        value: { }
        count:
          type: integer



    # authentication / authorization

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    Privilege:
      type: object
      required:
        - action
        - resource
        - scope
      properties:
        action:
          $ref: '#/components/schemas/Action'
        resource:
          $ref: '#/components/schemas/Resource'
        scope:
          $ref: '#/components/schemas/Scope'

    PrivilegeDto:
      type: object
      required:
        - id
        - action
        - resource
        - scope
      properties:
        id:
          type: string
          format: uuid
        action:
          $ref: '#/components/schemas/Action'
        resource:
          $ref: '#/components/schemas/Resource'
        scope:
          $ref: '#/components/schemas/Scope'

    LoginDto:
      type: object
      required:
        - id
        - privileges
      properties:
        id:
          type: string
          format: uuid
        privileges:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegeDto'
        clubId:
          type: string
          format: uuid


    # pagination

    Pagination:
      type: object
      required:
        - total
        - limit
        - offset
        - sort
        - search
      properties:
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer
        sort:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        search:
          type: string

    Order:
      type: object
      required:
        - field
        - direction
      properties:
        field:
          type: string
        direction:
          type: string
          enum:
            - ASC
            - DESC

    # email

    AssignedEmailDto:
      type: object
      required:
        - recipient
      properties:
        recipient:
          type: string
        sentAt:
          type: string
          format: date-time
        lastErrorAt:
          type: string
          format: date-time
        lastError:
          type: string


    # user

    AppUserNameDto:
      type: object
      required:
        - id
        - firstname
        - lastname
      properties:
        id:
          type: string
          format: uuid
        firstname:
          type: string
        lastname:
          type: string

    AppUserDto:
      type: object
      required:
        - id
        - email
        - firstname
        - lastname
        - roles
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleDto'

    UpdateAppUserRequest:
      type: object
      required:
        - firstname
        - lastname
        - roles
      properties:
        firstname:
          type: string
        lastname:
          type: string
        roles:
          type: array
          items:
            type: string
            format: uuid

    AppUserRegistrationDto:
      type: object
      required:
        - id
        - email
        - firstname
        - lastname
        - language
        - expiresAt
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        language:
          $ref: '#/components/schemas/EmailLanguage'
        expiresAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        assignedEmail:
          $ref: '#/components/schemas/AssignedEmailDto'

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstname
        - lastname
        - clubname
        - language
        - callbackUrl
      properties:
        email:
          type: string
        password:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        clubname:
          type: string
        language:
          $ref: '#/components/schemas/EmailLanguage'
        callbackUrl:
          type: string
          format: url

    VerifyRegistrationRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string

    AppUserInvitationDto:
      type: object
      required:
        - id
        - email
        - firstname
        - lastname
        - language
        - expiresAt
        - createdAt
        - roles
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        language:
          $ref: '#/components/schemas/EmailLanguage'
        expiresAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        assignedEmail:
          $ref: '#/components/schemas/AssignedEmailDto'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleDto'
        createdBy:
          $ref: '#/components/schemas/AppUserNameDto'

    InviteRequest:
      type: object
      required:
        - email
        - firstname
        - lastname
        - language
        - roles
        - callbackUrl
      properties:
        email:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        language:
          $ref: '#/components/schemas/EmailLanguage'
        roles:
          type: array
          items:
            type: string
            format: uuid
        admin:
          type: boolean
        callbackUrl:
          type: string
          format: url

    AcceptInvitationRequest:
      type: object
      required:
        - token
        - password
      properties:
        token:
          type: string
        password:
          type: string


    PasswordResetInitRequest:
      type: object
      required:
        - email
        - language
        - callbackUrl
      properties:
        email:
          type: string
        language:
          $ref: '#/components/schemas/EmailLanguage'
        callbackUrl:
          type: string
          format: url

    PasswordResetRequest:
      type: object
      required:
        - password
      properties:
        password:
          type: string


    # role

    RoleDto:
      type: object
      required:
        - id
        - name
        - privileges
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        privileges:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegeDto'

    RoleRequest:
      type: object
      required:
        - name
        - privileges
      properties:
        name:
          type: string
        description:
          type: string
        privileges:
          type: array
          items:
            type: string
            format: uuid

    # event

    EventDto:
      type: object
      required:
        - id
        - name
        - registrationsFinalized
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        location:
          type: string
        registrationAvailableFrom:
          type: string
          format: date-time
        registrationAvailableTo:
          type: string
          format: date-time
        invoicePrefix:
          type: string
        published:
          type: boolean
        invoicesProduced:
          type: string
          format: date-time
        paymentDueBy:
          type: string
          format: date
        registrationsFinalized:
          type: boolean

    EventPublicDto:
      type: object
      required:
        - id
        - name
        - competitionCount
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        location:
          type: string
        registrationAvailableFrom:
          type: string
          format: date-time
        registrationAvailableTo:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        competitionCount:
          type: number
        eventFrom:
          type: string
          format: date
        eventTo:
          type: string
          format: date

    EventRegistrationViewDto:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - eventId
        - eventName
        - clubId
        - clubName
        - competitionRegistrationCount
        - participantCount
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        message:
          type: string
        updatedAt:
          type: string
          format: date-time
        eventId:
          type: string
          format: uuid
        eventName:
          type: string
        clubId:
          type: string
          format: uuid
        clubName:
          type: string
        competitionRegistrationCount:
          type: number
        participantCount:
          type: number

    EventRequest:
      type: object
      required:
        - name
        - published
      properties:
        name:
          type: string
        description:
          type: string
        location:
          type: string
        registrationAvailableFrom:
          type: string
          format: date-time
        registrationAvailableTo:
          type: string
          format: date-time
        invoicePrefix:
          type: string
        published:
          type: boolean
        paymentDueBy:
          type: string
          format: date



    # eventDay

    EventDayDto:
      type: object
      required:
        - id
        - event
        - date
      properties:
        id:
          type: string
          format: uuid
        event:
          type: string
          format: uuid
        date:
          type: string
          format: date
        name:
          type: string
        description:
          type: string

    EventDayRequest:
      type: object
      required:
        - date
      properties:
        date:
          type: string
          format: date
        name:
          type: string
        description:
          type: string


    AssignCompetitionsToDayRequest:
      type: object
      required:
        - competitions
      properties:
        competitions:
          type: array
          items:
            type: string
            format: uuid



    # competitionProperties

    CompetitionPropertiesDto:
      type: object
      required:
        - identifier
        - name
        - namedParticipants
        - fees
      properties:
        identifier:
          type: string
        name:
          type: string
        shortName:
          type: string
        description:
          type: string
        competitionCategory:
          $ref: '#/components/schemas/CompetitionCategoryDto'
        namedParticipants:
          type: array
          items:
            $ref: '#/components/schemas/NamedParticipantForCompetitionDto'
        fees:
          type: array
          items:
            $ref: '#/components/schemas/FeeForCompetitionDto'


    NamedParticipantForCompetitionDto:
      type: object
      required:
        - id
        - name
        - countMales
        - countFemales
        - countNonBinary
        - countMixed
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        countMales:
          type: integer
        countFemales:
          type: integer
        countNonBinary:
          type: integer
        countMixed:
          type: integer

    FeeForCompetitionDto:
      type: object
      required:
        - id
        - name
        - required
        - amount
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        required:
          type: boolean
        amount:
          type: string
          format: decimal


    CompetitionPropertiesRequestDto:
      type: object
      required:
        - identifier
        - name
        - namedParticipants
        - fees
      properties:
        identifier:
          type: string
        name:
          type: string
        shortName:
          type: string
        description:
          type: string
        competitionCategory:
          type: string
          format: uuid
        namedParticipants:
          type: array
          items:
            $ref: '#/components/schemas/NamedParticipantForCompetitionRequestDto'
        fees:
          type: array
          items:
            $ref: '#/components/schemas/FeeForCompetitionRequestDto'


    NamedParticipantForCompetitionRequestDto:
      type: object
      required:
        - namedParticipant
        - countMales
        - countFemales
        - countNonBinary
        - countMixed
      properties:
        namedParticipant:
          type: string
          format: uuid
        countMales:
          type: integer
        countFemales:
          type: integer
        countNonBinary:
          type: integer
        countMixed:
          type: integer

    FeeForCompetitionRequestDto:
      type: object
      required:
        - fee
        - required
        - amount
      properties:
        fee:
          type: string
          format: uuid
        required:
          type: boolean
        amount:
          type: string
          format: decimal



    # competition

    CompetitionDto:
      type: object
      required:
        - id
        - event
        - properties
      properties:
        id:
          type: string
          format: uuid
        event:
          type: string
          format: uuid
        properties:
          $ref: '#/components/schemas/CompetitionPropertiesDto'
        template:
          type: string
          format: uuid
        registrationCount:
          type: number


    CompetitionRequest:
      type: object
      properties:
        properties:
          $ref: '#/components/schemas/CompetitionPropertiesRequestDto'
        template:
          type: string
          format: uuid


    AssignDaysToCompetitionRequest:
      type: object
      required:
        - days
      properties:
        days:
          type: array
          items:
            type: string
            format: uuid

    CompetitionRegistrationTeamDto:
      type: object
      required:
        - id
        - name
        - clubName
        - clubId
        - optionalFees
        - namedParticipants
        - updatedAt
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        clubId:
          type: string
          format: uuid
        clubName:
          type: string
        optionalFees:
          type: array
          items:
            $ref: '#/components/schemas/CompetitionRegistrationFeeDto'
        namedParticipants:
          type: array
          items:
            $ref: '#/components/schemas/CompetitionRegistrationNamedParticipantDto'
        updatedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    CompetitionRegistrationFeeDto:
      type: object
      required:
        - feeId
        - feeName
      properties:
        feeId:
          type: string
          format: uuid
        feeName:
          type: string

    CompetitionRegistrationNamedParticipantDto:
      type: object
      required:
        - namedParticipantId
        - namedParticipantName
        - participants
      properties:
        namedParticipantId:
          type: string
          format: uuid
        namedParticipantName:
          type: string
        participants:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantForEventDto'


    CompetitionRegistrationsWithoutTeamNumberDto:
      type: object
      required:
        - competitionId
        - competitionIdentifier
        - competitionName
        - registrationId
        - registrationClub
      properties:
        competitionId:
          type: string
          format: uuid
        competitionIdentifier:
          type: string
        competitionName:
          type: string
        registrationId:
          type: string
          format: uuid
        registrationClub:
          type: string
        registrationName:
          type: string



    # competitionSetup

    CompetitionSetupMatchDto:
      type: object
      required:
        - weighting
        - participants
        - executionOrder
      properties:
        weighting:
          type: integer
        teams:
          type: integer
        name:
          type: string
        participants:
          type: array
          items:
            type: integer
        executionOrder:
          type: integer
        startTimeOffset:
          type: integer

    CompetitionSetupGroupDto:
      type: object
      required:
        - weighting
        - matches
        - participants
        - executionOrder
      properties:
        weighting:
          type: integer
        teams:
          type: integer
        name:
          type: string
        matches:
          type: array
          items:
            $ref: '#/components/schemas/CompetitionSetupMatchDto'
        participants:
          type: array
          items:
            type: integer

    CompetitionSetupGroupStatisticEvaluationDto:
      type: object
      required:
        - name
        - priority
        - rankByBiggest
        - ignoreBiggestValues
        - ignoreSmallestValues
        - asAverage
      properties:
        name:
          type: string
        priority:
          type: integer
        rankByBiggest:
          type: boolean
        ignoreBiggestValues:
          type: integer
        ignoreSmallestValues:
          type: integer
        asAverage:
          type: boolean


    CompetitionSetupPlaceDto:
      type: object
      required:
        - roundOutcome
        - place
      properties:
        roundOutcome:
          type: integer
        place:
          type: integer


    CompetitionSetupRoundDto:
      type: object
      required:
        - name
        - required
        - useDefaultSeeding
        - placesOption
      properties:
        name:
          type: string
        required:
          type: boolean
        matches:
          type: array
          items:
            $ref: '#/components/schemas/CompetitionSetupMatchDto'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/CompetitionSetupGroupDto'
        statisticEvaluations:
          type: array
          items:
            $ref: '#/components/schemas/CompetitionSetupGroupStatisticEvaluationDto'
        useDefaultSeeding:
          type: boolean
        placesOption:
          type: string
          enum:
            - EQUAL
            - ASCENDING
            - CUSTOM
        places:
          type: array
          items:
            $ref: '#/components/schemas/CompetitionSetupPlaceDto'

    CompetitionSetupDto:
      type: object
      required:
        - rounds
      properties:
        rounds:
          type: array
          items:
            $ref: '#/components/schemas/CompetitionSetupRoundDto'


    CompetitionSetupTemplateRequest:
      type: object
      required:
        - name
        - rounds
      properties:
        name:
          type: string
        description:
          type: string
        rounds:
          type: array
          items:
            $ref: '#/components/schemas/CompetitionSetupRoundDto'

    CompetitionSetupTemplateDto:
      type: object
      required:
        - id
        - name
        - rounds
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        rounds:
          type: array
          items:
            $ref: '#/components/schemas/CompetitionSetupRoundDto'


    # competitionTemplate

    CompetitionTemplateDto:
      type: object
      required:
        - id
        - properties
      properties:
        id:
          type: string
          format: uuid
        properties:
          $ref: '#/components/schemas/CompetitionPropertiesDto'


    CompetitionTemplateRequest:
      type: object
      required:
        - properties
      properties:
        properties:
          $ref: '#/components/schemas/CompetitionPropertiesRequestDto'


    # competitionCategory

    CompetitionCategoryDto:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string

    CompetitionCategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string


    # namedParticipant

    NamedParticipantDto:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string

    NamedParticipantRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string


    # fee

    FeeDto:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string

    FeeRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string

    # participantRequirement

    ParticipantRequirementDto:
      type: object
      required:
        - id
        - name
        - optional
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        optional:
          type: boolean

    ParticipantRequirementReducedDto:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    ParticipantRequirementForEventDto:
      type: object
      required:
        - id
        - name
        - optional
        - active
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        optional:
          type: boolean
        active:
          type: boolean

    ParticipantRequirementUpsertDto:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        optional:
          type: boolean

    ParticipantRequirementCheckForEventConfigDto:
      type: object
      required:
        - requirementId
        - firstnameColName
        - lastnameColName
      properties:
        requirementId:
          type: string
          format: uuid
        separator:
          type: string
        charset:
          type: string
        firstnameColName:
          type: string
        lastnameColName:
          type: string
        yearsColName:
          type: string
        clubColName:
          type: string
        requirementColName:
          type: string
        requirementIsValidValue:
          type: string

    ParticipantRequirementCheckForEventUpsertDto:
      type: object
      required:
        - requirementId
        - approvedParticipants
      properties:
        requirementId:
          type: string
          format: uuid
        approvedParticipants:
          type: array
          items:
            type: string
            format: uuid

    # captcha

    CaptchaDto:
      type: object
      required:
        - id
        - imgSrc
        - solutionMin
        - solutionMax
        - handleToHeightRatio
        - start
      properties:
        id:
          type: string
          format: uuid
        imgSrc:
          type: string
          format: base64
        solutionMin:
          type: integer
        solutionMax:
          type: integer
        handleToHeightRatio:
          type: number
        start:
          type: integer

    # eventDocuments

    EventDocumentTypeRequest:
      type: object
      required:
        - name
        - required
        - confirmationRequired
      properties:
        name:
          type: string
        description:
          type: string
        required:
          type: boolean
        confirmationRequired:
          type: boolean

    EventDocumentTypeDto:
      type: object
      required:
        - id
        - name
        - required
        - confirmationRequired
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        required:
          type: boolean
        confirmationRequired:
          type: boolean

    EventDocumentRequest:
      type: object
      properties:
        documentType:
          type: string
          format: uuid

    EventDocumentDto:
      type: object
      required:
        - id
        - name
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        documentType:
          $ref: '#/components/schemas/EventDocumentTypeDto'
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        createdBy:
          $ref: '#/components/schemas/AppUserNameDto'
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          $ref: '#/components/schemas/AppUserNameDto'


    # club

    ClubUpsertDto:
      type:
        object
      required:
        - name
      properties:
        name:
          type: string
    ClubDto:
      type:
        object
      required:
        - id
        - name
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ClubSearchDto:
      type:
        object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    ParticipantDto:
      type: object
      required:
        - id
        - firstname
        - lastname
        - gender
        - usedInRegistration
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        firstname:
          type: string
        lastname:
          type: string
        year:
          type: integer
          nullable: true
        gender:
          $ref: '#/components/schemas/Gender'
        phone:
          type: string
          nullable: true
        external:
          type: boolean
          nullable: true
        externalClubName:
          type: string
          nullable: true
        usedInRegistration:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ParticipantForEventDto:
      type: object
      required:
        - id
        - clubId
        - clubName
        - firstname
        - lastname
        - gender
      properties:
        id:
          type: string
          format: uuid
        clubId:
          type: string
          format: uuid
        clubName:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        year:
          type: integer
          nullable: true
        gender:
          $ref: '#/components/schemas/Gender'
        external:
          type: boolean
          nullable: true
        externalClubName:
          type: string
          nullable: true
        participantRequirementsChecked:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantRequirementReducedDto'

    # participant

    ParticipantUpsertDto:
      type: object
      required:
        - firstname
        - lastname
        - gender
      properties:
        firstname:
          type: string
        lastname:
          type: string
        year:
          type: integer
          nullable: true
        gender:
          $ref: '#/components/schemas/Gender'
        phone:
          type: string
          nullable: true
        external:
          type: boolean
          nullable: true
        externalClubName:
          type: string
          nullable: true

    # event registration

    EventRegistrationTemplateDto:
      type: object
      properties:
        info:
          $ref: '#/components/schemas/EventRegistrationInfoDto'
        upsertableRegistration:
          $ref: '#/components/schemas/EventRegistrationUpsertDto'
      required:
        - info
        - upsertableRegistration

    EventRegistrationInfoDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        location:
          type: string
        days:
          type: array
          items:
            $ref: '#/components/schemas/EventRegistrationDayDto'
        documentTypes:
          type: array
          items:
            $ref: '#/components/schemas/EventRegistrationDocumentTypeDto'
        competitionsSingle:
          type: array
          items:
            $ref: '#/components/schemas/EventRegistrationCompetitionDto'
        competitionsTeam:
          type: array
          items:
            $ref: '#/components/schemas/EventRegistrationCompetitionDto'
      required:
        - name
        - days
        - competitionsSingle
        - competitionsTeam

    EventRegistrationDayDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        date:
          type: string
          format: date
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      required:
        - id
        - date

    EventRegistrationDocumentTypeDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        confirmationRequired:
          type: boolean
        files:
          type: array
          items:
            $ref: '#/components/schemas/EventRegistrationDocumentFileDto'
      required:
        - id
        - name
        - type
        - files

    EventRegistrationDocumentFileDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      required:
        - id
        - name

    EventRegistrationCompetitionDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        identifier:
          type: string
        name:
          type: string
        shortName:
          type: string
        description:
          type: string
        countMales:
          type: integer
        countFemales:
          type: integer
        countNonBinary:
          type: integer
        countMixed:
          type: integer
        competitionCategory:
          type: string
        namedParticipant:
          type: array
          items:
            $ref: '#/components/schemas/EventRegistrationNamedParticipantDto'
        fees:
          type: array
          items:
            $ref: '#/components/schemas/EventRegistrationFeeDto'
        days:
          type: array
          items:
            type: string
            format: uuid
      required:
        - id
        - name
        - identifier
        - countMales
        - countFemales
        - countMixed
        - countNonBinary
        - competitionCategory
        - days

    EventRegistrationNamedParticipantDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        required:
          type: boolean
        countMales:
          type: integer
        countFemales:
          type: integer
        countNonBinary:
          type: integer
        countMixed:
          type: integer
      required:
        - id
        - name
        - countMales
        - countFemales
        - countMixed
        - countNonBinary

    EventRegistrationFeeDto:
      type: object
      required:
        - id
        - label
        - required
        - amount
      properties:
        id:
          type: string
          format: uuid
        label:
          type: string
        description:
          type: string
          nullable: true
        required:
          type: boolean
        amount:
          type: number

    EventRegistrationUpsertDto:
      type: object
      properties:
        participants:
          type: array
          items:
            $ref: '#/components/schemas/EventRegistrationParticipantUpsertDto'
        competitionRegistrations:
          type: array
          items:
            $ref: '#/components/schemas/CompetitionRegistrationUpsertDto'
        message:
          type: string
      required:
        - participants
        - competitionRegistrations

    CompetitionRegistrationUpsertDto:
      type: object
      properties:
        competitionId:
          type: string
          format: uuid
        teams:
          type: array
          items:
            $ref: '#/components/schemas/CompetitionRegistrationTeamUpsertDto'
      required:
        - competitionId

    CompetitionRegistrationTeamUpsertDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        clubId:
          type: string
          format: uuid
        optionalFees:
          type: array
          items:
            type: string
            format: uuid
        namedParticipants:
          type: array
          items:
            $ref: '#/components/schemas/CompetitionRegistrationNamedParticipantUpsertDto'
      required:
        - id

    CompetitionRegistrationNamedParticipantUpsertDto:
      type: object
      properties:
        namedParticipantId:
          type: string
          format: uuid
        participantIds:
          type: array
          items:
            type: string
            format: uuid
      required:
        - namedParticipantId
        - participantIds

    EventRegistrationParticipantUpsertDto:
      type: object
      required:
        - id
        - firstname
        - lastname
        - gender
      properties:
        id:
          type: string
          format: uuid
        isNew:
          type: boolean
        hasChanged:
          type: boolean
        firstname:
          type: string
        lastname:
          type: string
        year:
          type: integer
          nullable: true
        gender:
          $ref: '#/components/schemas/Gender'
        external:
          type: boolean
          nullable: true
        externalClubName:
          type: string
          nullable: true
        competitionsSingle:
          type: array
          items:
            $ref: '#/components/schemas/CompetitionRegistrationSingleUpsertDto'

    CompetitionRegistrationSingleUpsertDto:
      type: object
      properties:
        competitionId:
          type: string
          format: uuid
        optionalFees:
          type: array
          items:
            type: string
            format: uuid
      required:
        - competitionId

    DocumentType:
      type: string
      enum:
        - 'INVOICE'
        - 'REGISTRATION_REPORT'

    DocumentTemplateDto:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        pagePaddingTop:
          type: number
          format: double
        pagePaddingLeft:
          type: number
          format: double
        pagePaddingRight:
          type: number
          format: double
        pagePaddingBottom:
          type: number
          format: double

    DocumentTemplateRequest:
      type: object
      properties:
        pagePaddingTop:
          type: number
          format: double
        pagePaddingLeft:
          type: number
          format: double
        pagePaddingRight:
          type: number
          format: double
        pagePaddingBottom:
          type: number
          format: double

    AssignDocumentTemplateRequest:
      type: object
      properties:
        template:
          type: string
          format: uuid
        event:
          type: string
          format: uuid

    AssignedTemplateId:
      type: object
      properties:
        value:
          type: string
          format: uuid

    TaskDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        event:
          type: string
          format: uuid
        eventName:
          type: string
        name:
          type: string
        dueDate:
          type: string
          format: date-time
          nullable: true
        description:
          type: string
          nullable: true
        remark:
          type: string
          nullable: true
        state:
          $ref: '#/components/schemas/TaskState'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        responsibleUsers:
          type: array
          items:
            $ref: '#/components/schemas/AppUserNameDto'
      required:
        - id
        - event
        - eventName
        - name
        - state
        - createdAt
        - updatedAt
        - responsibleUsers

    TaskUpsertDto:
      type: object
      properties:
        name:
          type: string
        dueDate:
          type: string
          format: date-time
          nullable: true
        description:
          type: string
          nullable: true
        remark:
          type: string
          nullable: true
        state:
          $ref: '#/components/schemas/TaskState'
        responsibleUsers:
          type: array
          items:
            type: string
            format: uuid
      required:
        - name
        - state
        - responsibleUsers

    TaskState:
      type: string
      enum:
        - OPEN
        - IN_PROGRESS
        - DONE
        - CANCELED

    WorkTypeDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        color:
          type: string
        minUser:
          type: integer
        maxUser:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - minUser
        - createdAt
        - updatedAt

    WorkTypeUpsertDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        color:
          type: string
        minUser:
          type: integer
        maxUser:
          type: integer
      required:
        - name
        - minUser

    WorkShiftWithAssignedUsersDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        event:
          type: string
          format: uuid
        timeFrom:
          type: string
          format: date-time
        timeTo:
          type: string
          format: date-time
        eventName:
          type: string
        workType:
          type: string
          format: uuid
        workTypeName:
          type: string
        remark:
          type: string
        minUser:
          type: integer
          format: int32
        maxUser:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        assignedUsers:
          type: array
          items:
            $ref: '#/components/schemas/AppUserNameDto'
      required:
        - id
        - title
        - event
        - timeFrom
        - timeTo
        - eventName
        - workType
        - name
        - minUser
        - createdAt
        - updatedAt
        - assignedUsers

    WorkShiftUpsertDto:
      type: object
      properties:
        workType:
          type: string
          format: uuid
        timeFrom:
          type: string
          format: date-time
        timeTo:
          type: string
          format: date-time
        minUser:
          type: integer
          format: int32
        maxUser:
          type: integer
          format: int32
        remark:
          type: string
        assignedUsers:
          type: array
          items:
            type: string
            format: uuid
      required:
        - workType
        - timeFrom
        - timeTo
        - minUser
        - assignedUsers

    DocumentTypeDto:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/DocumentType'
        assignedTemplate:
          $ref: '#/components/schemas/AssignedTemplateId'

    BankAccountDto:
      type: object
      required:
        - id
        - holder
        - iban
        - bic
        - bank
      properties:
        id:
          type: string
          format: uuid
        holder:
          type: string
        iban:
          type: string
        bic:
          type: string
        bank:
          type: string

    BankAccountRequest:
      type: object
      required:
        - holder
        - iban
        - bic
        - bank
      properties:
        holder:
          type: string
        iban:
          type: string
        bic:
          type: string
        bank:
          type: string

    AssignBankAccountRequest:
      type: object
      properties:
        bankAccount:
          type: string
          format: uuid
        event:
          type: string
          format: uuid

    AssignedBankAccountDto:
      type: object
      properties:
        assigned:
          $ref: '#/components/schemas/BankAccountDto'

    ContactInformationRequest:
      type: object
      required:
        - name
        - addressZip
        - addressCity
        - addressStreet
        - email
      properties:
        name:
          type: string
        addressZip:
          type: string
        addressCity:
          type: string
        addressStreet:
          type: string
        email:
          type: string

    ContactInformationDto:
      type: object
      required:
        - id
        - name
        - addressZip
        - addressCity
        - addressStreet
        - email
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        addressZip:
          type: string
        addressCity:
          type: string
        addressStreet:
          type: string
        email:
          type: string

    AssignContactInformationRequest:
      type: object
      properties:
        contact:
          type: string
          format: uuid
        event:
          type: string
          format: uuid

    AssignedContactInformationDto:
      type: object
      properties:
        assigned:
          $ref: '#/components/schemas/ContactInformationDto'



    CompetitionExecutionProgressDto:
      type: object
      required:
        - rounds
        - canNotCreateRoundReasons
        - lastRoundFinished
      properties:
        rounds:
          type: array
          items:
            $ref: '#/components/schemas/CompetitionRoundDto'
        canNotCreateRoundReasons:
          type: array
          items:
            $ref: '#/components/schemas/CompetitionExecutionCanNotCreateRoundReason'
        lastRoundFinished:
          type: boolean

    CompetitionExecutionCanNotCreateRoundReason:
      type: string
      enum:
        - ALL_ROUNDS_CREATED
        - NO_ROUNDS_IN_SETUP
        - NO_SETUP_MATCHES
        - NO_REGISTRATIONS
        - REGISTRATIONS_NOT_FINALIZED
        - NOT_ENOUGH_TEAM_SPACE
        - NOT_ALL_PLACES_SET

    CompetitionRoundDto:
      type: object
      required:
        - name
        - matches
        - required
      properties:
        name:
          type: string
        matches:
          type: array
          items:
            $ref: '#/components/schemas/CompetitionMatchDto'
        required:
          type: boolean

    CompetitionMatchDto:
      type: object
      required:
        - id
        - teams
        - weighting
        - executionOrder
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        teams:
          type: array
          items:
            $ref: '#/components/schemas/CompetitionMatchTeamDto'
        weighting:
          type: integer
        executionOrder:
          type: integer
        startTime:
          type: string
          format: date-time
        startTimeOffset:
          type: integer

    CompetitionMatchTeamDto:
      type: object
      required:
        - registrationId
        - teamNumber
        - clubId
        - clubName
        - startNumber
      properties:
        registrationId:
          type: string
          format: uuid
        teamNumber:
          type: integer
        clubId:
          type: string
          format: uuid
        clubName:
          type: string
        name:
          type: string
        startNumber:
          type: integer
        place:
          type: integer


    UpdateCompetitionMatchRequest:
      type: object
      required:
        - teams
      properties:
        startTime:
          type: string
          format: date-time
        teams:
          type: array
          items:
            $ref: '#/components/schemas/UpdateCompetitionMatchTeamRequest'

    UpdateCompetitionMatchTeamRequest:
      type: object
      required:
        - registrationId
        - startNumber
      properties:
        registrationId:
          type: string
          format: uuid
        startNumber:
          type: integer

    UpdateCompetitionMatchResultRequest:
      type: object
      required:
        - teamResults
      properties:
        teamResults:
          type: array
          items:
            $ref: '#/components/schemas/UpdateCompetitionMatchTeamResultRequest'

    UpdateCompetitionMatchTeamResultRequest:
      type: object
      required:
        - registrationId
        - place
      properties:
        registrationId:
          type: string
          format: uuid
        place:
          type: integer