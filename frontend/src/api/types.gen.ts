// This file is auto-generated by @hey-api/openapi-ts

export type AcceptInvitationRequest = {
    token: string
    password: string
}

export type Action = 'CREATE' | 'READ' | 'UPDATE' | 'DELETE'

export type ApiError = {
    status: {
        value: number
        description: string
    }
    message: string
    errorCode?: ErrorCode
}

export type AppUserDto = {
    id: string
    email: string
    firstname: string
    lastname: string
    roles: Array<RoleDto>
    qrCodeId?: string
}

export type AppUserForEventDto = {
    id: string
    firstname: string
    lastname: string
    email: string
    club?: string
    qrCodeId?: string
}

export type AppUserInvitationDto = {
    id: string
    email: string
    firstname: string
    lastname: string
    language: EmailLanguage
    expiresAt: string
    createdAt: string
    assignedEmail?: AssignedEmailDto
    roles: Array<RoleDto>
    createdBy?: AppUserNameDto
}

export type AppUserNameDto = {
    id: string
    firstname: string
    lastname: string
}

export type AppUserRegistrationDto = {
    id: string
    email: string
    firstname: string
    lastname: string
    language: EmailLanguage
    expiresAt: string
    createdAt: string
    assignedEmail?: AssignedEmailDto
}

export type AppUserWithQrCodeDto = {
    id: string
    firstname: string
    lastname: string
    email: string
    club?: string
    roles: Array<RoleDto>
    qrCodeId: string
    eventId: string
    createdAt: string
    createdBy?: string
}

export type AssignBankAccountRequest = {
    bankAccount?: string
    event?: string
}

export type AssignCompetitionsToDayRequest = {
    competitions: Array<string>
}

export type AssignContactInformationRequest = {
    contact?: string
    event?: string
}

export type AssignDaysToCompetitionRequest = {
    days: Array<string>
}

export type AssignDocumentTemplateRequest = {
    template?: string
    event?: string
}

export type AssignedBankAccountDto = {
    assigned?: BankAccountDto
}

export type AssignedContactInformationDto = {
    assigned?: ContactInformationDto
}

export type AssignedEmailDto = {
    recipient: string
    sentAt?: string
    lastErrorAt?: string
    lastError?: string
}

export type AssignedTemplateId = {
    value?: string
}

export type AssignRequirementToNamedParticipantDto = {
    requirementId: string
    qrCodeRequired: boolean
}

export type BadRequestError = ApiError & {
    details?: {
        validExample?: unknown
    }
}

export type BankAccountDto = {
    id: string
    holder: string
    iban: string
    bic: string
    bank: string
}

export type BankAccountRequest = {
    holder: string
    iban: string
    bic: string
    bank: string
}

export type CaptchaDto = {
    id: string
    imgSrc: string
    solutionMin: number
    solutionMax: number
    handleToHeightRatio: number
    start: number
}

export type CatererTransactionRequest = {
    appUserId: string
    price: string
    eventId: string
}

export type CatererTransactionViewDto = {
    id: string
    catererId: string
    catererFirstname: string
    catererLastname: string
    appUserId: string
    userFirstname: string
    userLastname: string
    eventId: string
    price: string
    createdAt: string
}

export type CheckedParticipantRequirement = {
    id: string
    note?: string
}

export type ClubDto = {
    id: string
    name: string
    createdAt: string
    updatedAt: string
}

export type ClubSearchDto = {
    id: string
    name: string
}

export type ClubUpsertDto = {
    name: string
}

export type CompetitionCategoryDto = {
    id: string
    name: string
    description?: string
}

export type CompetitionCategoryRequest = {
    name: string
    description?: string
}

export type CompetitionChallengeConfigDto = {
    resultConfirmationImageRequired: boolean
    startAt: string
    endAt: string
}

export type CompetitionChallengeConfigRequest = {
    resultConfirmationImageRequired: boolean
    startAt: string
    endAt: string
}

export type CompetitionChallengeResultRequest = {
    result: number
}

export type CompetitionChoiceDto = {
    id: string
    identifier: string
    name: string
    shortName?: string
    category?: string
}

export type CompetitionDeregistrationDto = {
    competitionSetupRoundId?: string
    reason?: string
}

export type CompetitionDeregistrationRequest = {
    reason?: string
}

export type CompetitionDto = {
    id: string
    event: string
    properties: CompetitionPropertiesDto
    template?: string
    registrationCount?: number
}

export type CompetitionExecutionCanNotCreateRoundReason =
    | 'ALL_ROUNDS_CREATED'
    | 'NO_ROUNDS_IN_SETUP'
    | 'NO_SETUP_MATCHES'
    | 'NO_REGISTRATIONS'
    | 'REGISTRATIONS_NOT_FINALIZED'
    | 'NOT_ENOUGH_TEAM_SPACE'
    | 'NOT_ALL_PLACES_SET'

export type CompetitionExecutionProgressDto = {
    rounds: Array<CompetitionRoundDto>
    canNotCreateRoundReasons: Array<CompetitionExecutionCanNotCreateRoundReason>
    isChallengeEvent: boolean
}

export type CompetitionForExportDto = {
    id: string
    identifier: string
    name: string
}

export type CompetitionMatchDto = {
    id: string
    name?: string
    teams: Array<CompetitionMatchTeamDto>
    weighting: number
    executionOrder: number
    startTime?: string
    startTimeOffset?: number
    currentlyRunning: boolean
}

export type CompetitionMatchTeamDto = {
    registrationId: string
    teamNumber: number
    clubId: string
    clubName: string
    name?: string
    startNumber: number
    place?: number
    deregistered: boolean
    deregistrationLocked?: boolean
    deregistrationReason?: string
    failed: boolean
    failedReason?: string
}

export type CompetitionPropertiesDto = {
    identifier: string
    name: string
    shortName?: string
    description?: string
    competitionCategory?: CompetitionCategoryDto
    namedParticipants: Array<NamedParticipantForCompetitionDto>
    fees: Array<FeeForCompetitionDto>
    lateRegistrationAllowed: boolean
    challengeConfig?: CompetitionChallengeConfigDto
    ratingCategoryRequired: boolean
}

export type CompetitionPropertiesRequest = {
    identifier: string
    name: string
    shortName?: string
    description?: string
    competitionCategory?: string
    namedParticipants: Array<NamedParticipantForCompetitionRequestDto>
    fees: Array<FeeForCompetitionRequestDto>
    lateRegistrationAllowed: boolean
    setupTemplate?: string
    challengeConfig?: CompetitionChallengeConfigRequest
    ratingCategoryRequired: boolean
}

export type CompetitionRegistrationDto = {
    id: string
    name?: string
    clubId: string
    clubName: string
    optionalFees: Array<CompetitionRegistrationFeeDto>
    namedParticipants: Array<CompetitionRegistrationNamedParticipantDto>
    isLate: boolean
    ratingCategory?: RatingCategoryDto
    updatedAt: string
    createdAt: string
    deregistration?: CompetitionDeregistrationDto
}

export type CompetitionRegistrationFeeDto = {
    feeId: string
    feeName: string
}

export type CompetitionRegistrationLockedDto = {
    competitionId?: string
    teams: Array<CompetitionRegistrationTeamLockedDto>
}

export type CompetitionRegistrationNamedParticipantDto = {
    namedParticipantId: string
    namedParticipantName: string
    participants: Array<ParticipantForEventDto>
}

export type CompetitionRegistrationNamedParticipantLockedDto = {
    namedParticipantId: string
    participantIds: Array<string>
}

export type CompetitionRegistrationNamedParticipantRequirementDto = {
    id: string
    name: string
    description?: string
    optional: boolean
    checkInApp: boolean
    qrCodeRequired: boolean
}

export type CompetitionRegistrationNamedParticipantUpsertDto = {
    namedParticipantId: string
    participantIds: Array<string>
}

export type CompetitionRegistrationSingleLockedDto = {
    competitionId: string
    optionalFees: Array<string>
    isLate: boolean
    ratingCategory?: string
}

export type CompetitionRegistrationSingleUpsertDto = {
    competitionId: string
    optionalFees?: Array<string>
    ratingCategory?: string
}

export type CompetitionRegistrationsWithoutTeamNumberDto = {
    competitionId: string
    competitionIdentifier: string
    competitionName: string
    registrationId: string
    registrationClub: string
    registrationName?: string
}

export type CompetitionRegistrationTeamDto = {
    id: string
    name?: string
    clubId: string
    clubName: string
    namedParticipants: Array<CompetitionRegistrationTeamNamedParticipantDto>
    deregistration?: CompetitionDeregistrationDto
    globalParticipantRequirements: Array<ParticipantRequirementDto>
    challengeResultValue?: number
    /**
     * Map of documentId to documentName
     */
    challengeResultDocuments?: {
        [key: string]: string
    }
    ratingCategory?: RatingCategoryDto
}

export type CompetitionRegistrationTeamLockedDto = {
    id: string
    optionalFees: Array<string>
    namedParticipants: Array<CompetitionRegistrationNamedParticipantLockedDto>
    isLate: boolean
    ratingCategory?: string
}

export type CompetitionRegistrationTeamNamedParticipantDto = {
    namedParticipantId: string
    namedParticipantName: string
    participants: Array<ParticipantForCompetitionRegistrationTeam>
    participantRequirements: Array<CompetitionRegistrationNamedParticipantRequirementDto>
}

export type CompetitionRegistrationTeamUpsertDto = {
    id: string
    clubId?: string
    optionalFees?: Array<string>
    namedParticipants?: Array<CompetitionRegistrationNamedParticipantUpsertDto>
    ratingCategory?: string
    callbackUrl?: string
}

export type CompetitionRegistrationUpsertDto = {
    competitionId: string
    teams?: Array<CompetitionRegistrationTeamUpsertDto>
}

export type CompetitionRoundDto = {
    setupRoundId: string
    name: string
    matches: Array<CompetitionMatchDto>
    required: boolean
    substitutions: Array<SubstitutionDto>
}

export type CompetitionSetupDto = {
    rounds: Array<CompetitionSetupRoundDto>
}

export type CompetitionSetupGroupDto = {
    weighting: number
    teams?: number
    name?: string
    matches: Array<CompetitionSetupMatchDto>
    participants: Array<number>
}

export type CompetitionSetupGroupStatisticEvaluationDto = {
    name: string
    priority: number
    rankByBiggest: boolean
    ignoreBiggestValues: number
    ignoreSmallestValues: number
    asAverage: boolean
}

export type CompetitionSetupMatchDto = {
    weighting: number
    teams?: number
    name?: string
    participants: Array<number>
    executionOrder: number
    startTimeOffset?: number
}

export type CompetitionSetupPlaceDto = {
    roundOutcome: number
    place: number
}

export type CompetitionSetupRoundDto = {
    name: string
    required: boolean
    matches?: Array<CompetitionSetupMatchDto>
    groups?: Array<CompetitionSetupGroupDto>
    statisticEvaluations?: Array<CompetitionSetupGroupStatisticEvaluationDto>
    useDefaultSeeding: boolean
    placesOption: 'EQUAL' | 'ASCENDING' | 'CUSTOM'
    places?: Array<CompetitionSetupPlaceDto>
}

export type placesOption = 'EQUAL' | 'ASCENDING' | 'CUSTOM'

export type CompetitionSetupTemplateDto = {
    id: string
    name: string
    description?: string
    rounds: Array<CompetitionSetupRoundDto>
}

export type CompetitionSetupTemplateOverviewDto = {
    id: string
    name: string
    description?: string
}

export type CompetitionSetupTemplateRequest = {
    name: string
    description?: string
    rounds: Array<CompetitionSetupRoundDto>
}

export type CompetitionTeamNamedParticipantDto = {
    namedParticipantId: string
    namedParticipantName: string
    participants: Array<CompetitionTeamParticipantDto>
}

export type CompetitionTeamParticipantDto = {
    participantId: string
    namedParticipantName: string
    firstName: string
    lastName: string
    year: number
    gender: Gender
    external: boolean
    externalClubName?: string
}

export type CompetitionTeamPlaceDto = {
    competitionRegistrationId: string
    teamNumber: number
    teamName?: string
    clubId: string
    clubName: string
    namedParticipants: Array<CompetitionTeamNamedParticipantDto>
    place: number
    deregistered: boolean
    deregistrationReason?: string
}

export type CompetitionTemplateDto = {
    id: string
    properties: CompetitionPropertiesDto
    setupTemplate?: CompetitionSetupTemplateOverviewDto
}

export type ContactInformationDto = {
    id: string
    name: string
    addressZip: string
    addressCity: string
    addressStreet: string
    email: string
}

export type ContactInformationRequest = {
    name: string
    addressZip: string
    addressCity: string
    addressStreet: string
    email: string
}

export type CreateEventRequest = {
    name: string
    description?: string
    location?: string
    registrationAvailableFrom?: string
    registrationAvailableTo?: string
    lateRegistrationAvailableTo?: string
    invoicePrefix?: string
    published: boolean
    paymentDueBy?: string
    latePaymentDueBy?: string
    mixedTeamTerm?: string
    challengeEvent: boolean
    challengeResultType?: MatchResultType
    allowSelfSubmission: boolean
}

export type DocumentTemplateDto = {
    id: string
    name: string
    pagePaddingTop?: number
    pagePaddingLeft?: number
    pagePaddingRight?: number
    pagePaddingBottom?: number
}

export type DocumentTemplateRequest = {
    pagePaddingTop?: number
    pagePaddingLeft?: number
    pagePaddingRight?: number
    pagePaddingBottom?: number
}

export type DocumentType = 'INVOICE' | 'REGISTRATION_REPORT' | 'START_LIST'

export type DocumentTypeDto = {
    type: DocumentType
    assignedTemplate?: AssignedTemplateId
}

export type Duplicate = {
    value: unknown
    count: number
}

export type EmailLanguage = 'DE' | 'EN'

export type ErrorCode =
    | 'CAPTCHA_WRONG'
    | 'EMAIL_IN_USE'
    | 'CANNOT_ASSIGN_ROLES'
    | 'EVENT_REGISTRATION_ONGOING'
    | 'INVOICES_ALREADY_PRODUCED'
    | 'NO_ASSIGNED_PAYEE_INFORMATION'
    | 'NO_ASSIGNED_CONTACT_INFORMATION'
    | 'FILE_ERROR'
    | 'SPREADSHEET_NO_HEADERS'
    | 'SPREADSHEET_MALFORMED'
    | 'SPREADSHEET_COLUMN_UNKNOWN'
    | 'SPREADSHEET_CELL_BLANK'
    | 'SPREADSHEET_WRONG_CELL_TYPE'
    | 'SPREADSHEET_UNPARSABLE_STRING'
    | 'WRONG_TEAM_COUNT'
    | 'DUPLICATE_START_NUMBERS'
    | 'DUPLICATE_PLACES'
    | 'PLACES_UNCONTINUOUS'

export type EventDayDto = {
    id: string
    event: string
    date: string
    name?: string
    description?: string
}

export type EventDayRequest = {
    date: string
    name?: string
    description?: string
}

export type EventDocumentDto = {
    id: string
    documentType?: EventDocumentTypeDto
    name: string
    createdAt: string
    createdBy?: AppUserNameDto
    updatedAt: string
    updatedBy?: AppUserNameDto
}

export type EventDocumentRequest = {
    documentType?: string
}

export type EventDocumentTypeDto = {
    id: string
    name: string
    description?: string
    required: boolean
    confirmationRequired: boolean
}

export type EventDocumentTypeRequest = {
    name: string
    description?: string
    required: boolean
    confirmationRequired: boolean
}

export type EventDto = {
    id: string
    name: string
    description?: string
    location?: string
    registrationAvailableFrom?: string
    registrationAvailableTo?: string
    lateRegistrationAvailableTo?: string
    invoicePrefix?: string
    published?: boolean
    invoicesProduced?: string
    lateInvoicesProduced?: string
    paymentDueBy?: string
    latePaymentDueBy?: string
    registrationCount?: number
    registrationsFinalized: boolean
    mixedTeamTerm?: string
    challengeEvent: boolean
    challengeResultType?: MatchResultType
    allowSelfSubmission: boolean
}

export type EventForExportDto = {
    id: string
    name: string
    competitions: Array<CompetitionForExportDto>
}

export type EventInvoicesInfoDto = {
    totalAmount: string
    paidAmount: string
    producing: boolean
}

export type EventParticipantRequirementDto = {
    requirementId: string
    requirementName: string
    requirementDescription?: string
    namedParticipantId?: string
    qrCodeRequired: boolean
}

export type EventPublicDto = {
    id: string
    name: string
    description?: string
    location?: string
    registrationAvailableFrom?: string
    registrationAvailableTo?: string
    lateRegistrationAvailableTo?: string
    createdAt: string
    competitionCount: number
    eventFrom?: string
    eventTo?: string
    challengeEvent: boolean
    challengeResultType?: MatchResultType
    allowSelfSubmission: boolean
}

export type EventRegistrationCompetitionDto = {
    id: string
    identifier: string
    name: string
    shortName?: string
    description?: string
    competitionCategory?: string
    namedParticipant?: Array<EventRegistrationNamedParticipantDto>
    fees?: Array<EventRegistrationFeeDto>
    days: Array<string>
    lateRegistrationAllowed: boolean
    ratingCategoryRequired: boolean
}

export type EventRegistrationDayDto = {
    id: string
    date: string
    name?: string | null
    description?: string | null
}

export type EventRegistrationDocumentFileDto = {
    id: string
    name: string
}

export type EventRegistrationDocumentTypeDto = {
    id: string
    name: string
    description?: string
    confirmationRequired?: boolean
    files: Array<EventRegistrationDocumentFileDto>
}

export type EventRegistrationFeeDto = {
    id: string
    label: string
    description?: string | null
    required: boolean
    amount: string
    lateAmount?: string
}

export type EventRegistrationInfoDto = {
    state: OpenForRegistrationType
    name: string
    description?: string
    location?: string
    days: Array<EventRegistrationDayDto>
    documentTypes?: Array<EventRegistrationDocumentTypeDto>
    competitionsSingle: Array<EventRegistrationCompetitionDto>
    competitionsTeam: Array<EventRegistrationCompetitionDto>
}

export type EventRegistrationLockedDto = {
    participants: Array<EventRegistrationParticipantLockedDto>
    competitionRegistrations: Array<CompetitionRegistrationLockedDto>
}

export type EventRegistrationNamedParticipantDto = {
    id: string
    name: string
    description?: string
    required?: boolean
    countMales: number
    countFemales: number
    countNonBinary: number
    countMixed: number
}

export type EventRegistrationParticipantLockedDto = {
    id: string
    competitionsSingle: Array<CompetitionRegistrationSingleLockedDto>
}

export type EventRegistrationParticipantUpsertDto = {
    id: string
    isNew?: boolean
    hasChanged?: boolean
    firstname: string
    lastname: string
    year?: number | null
    gender: Gender
    email?: string
    external?: boolean | null
    externalClubName?: string | null
    competitionsSingle?: Array<CompetitionRegistrationSingleUpsertDto>
}

export type EventRegistrationTemplateDto = {
    info: EventRegistrationInfoDto
    upsertableRegistration: EventRegistrationUpsertDto
    lockedRegistration: EventRegistrationLockedDto
}

export type EventRegistrationUpsertDto = {
    participants: Array<EventRegistrationParticipantUpsertDto>
    competitionRegistrations: Array<CompetitionRegistrationUpsertDto>
    message?: string
    callbackUrl?: string
}

export type EventRegistrationViewDto = {
    id: string
    createdAt: string
    message?: string
    updatedAt: string
    eventId: string
    eventName: string
    clubId: string
    clubName: string
    competitionRegistrationCount: number
    participantCount: number
}

export type FeeDto = {
    id: string
    name: string
    description?: string
}

export type FeeForCompetitionDto = {
    id: string
    name: string
    description?: string
    required: boolean
    amount: string
    lateAmount?: string
}

export type FeeForCompetitionRequestDto = {
    fee: string
    required: boolean
    amount: string
    lateAmount?: string
}

export type FeeRequest = {
    name: string
    description?: string
}

export type FileExportEventStatusDto = {
    eventName: string
    fileExportTypes: WebDAVExportType
}

export type Gender = 'M' | 'F' | 'D'

export type GroupedParticipantQrAssignmentDto = {
    competitionRegistrationId: string
    competitionRegistrationName: string
    competitionName: string
    participants: Array<ParticipantQrAssignmentDto>
}

export type InfoViewConfigurationDto = {
    id: string
    eventId: string
    viewType: InfoViewType
    displayDurationSeconds: number
    dataLimit: number
    filters?: {
        [key: string]: unknown
    }
    sortOrder: number
    isActive: boolean
    createdAt: string
    updatedAt: string
}

export type InfoViewConfigurationRequest = {
    viewType: InfoViewType
    displayDurationSeconds: number
    dataLimit: number
    filters?: {
        [key: string]: unknown
    }
    sortOrder: number
    isActive: boolean
}

export type InfoViewType = 'UPCOMING_MATCHES' | 'LATEST_MATCH_RESULTS' | 'RUNNING_MATCHES'

export type Invalid =
    | string
    | {
          field: string
          error: Invalid
      }
    | {
          errorPositions: unknown
      }
    | Duplicate
    | {
          duplicates: Array<Duplicate>
      }
    | {
          value: string
          pattern: string
      }
    | {
          allOf: Array<Invalid>
      }
    | {
          anyOf: Array<Invalid>
      }
    | {
          oneOf: Array<
              | Invalid
              | {
                    [key: string]: unknown
                }
          >
      }

export type InviteRequest = {
    email: string
    firstname: string
    lastname: string
    language: EmailLanguage
    roles: Array<string>
    admin?: boolean
    callbackUrl: string
}

export type InvoiceDto = {
    id: string
    invoiceNumber: string
    totalAmount: string
    createdAt: string
    paidAt?: string
}

export type InvoiceUpdateRequestDto = {
    paid: boolean
}

export type LatestMatchResultInfo = {
    matchId: string
    competitionId: string
    competitionName: string
    categoryName?: string | null
    roundName?: string | null
    matchName?: string | null
    matchNumber?: number | null
    updatedAt: string
    startTime?: string
    teams: Array<MatchResultTeamInfo>
}

export type LoginDto = {
    id: string
    privileges: Array<PrivilegeDto>
    clubId?: string
}

export type LoginRequest = {
    email: string
    password: string
}

export type MatchForRunningStatusDto = {
    id: string
    competitionId: string
    competitionName: string
    roundNumber: number
    roundName: string
    matchNumber: number
    matchName?: string | null
    hasPlacesSet: boolean
    currentlyRunning: boolean
    startTime?: string
}

export type MatchResultImportConfigDto = {
    id: string
    name: string
    colTeamStartNumber: string
    colTeamPlace: string
}

export type MatchResultImportConfigRequest = {
    name: string
    colTeamStartNumber: string
    colTeamPlace: string
}

export type MatchResultTeamInfo = {
    teamId: string
    teamName?: string | null
    teamNumber?: number | null
    clubName?: string | null
    place?: number
    failed: boolean
    failedReason?: string
    deregistered: boolean
    deregisteredReason?: string
    participants: Array<ParticipantInfo>
}

export type MatchResultType = 'DISTANCE'

export type MatchStatus = 'PENDING' | 'IN_PROGRESS' | 'COMPLETED'

export type MatchTeamInfo = {
    teamId: string
    teamName?: string | null
    teamNumber?: number | null
    clubName?: string | null
    result?: string | null
    rank?: number | null
}

export type NamedParticipantDto = {
    id: string
    name: string
    description?: string
}

export type NamedParticipantForCompetitionDto = {
    id: string
    name: string
    description?: string
    countMales: number
    countFemales: number
    countNonBinary: number
    countMixed: number
}

export type NamedParticipantForCompetitionRequestDto = {
    namedParticipant: string
    countMales: number
    countFemales: number
    countNonBinary: number
    countMixed: number
}

export type NamedParticipantRequest = {
    name: string
    description?: string
}

export type NamedParticipantRequirementForEventDto = {
    id: string
    name: string
    qrCodeRequired: boolean
}

export type NamedParticipantWithRequirementsDto = {
    id: string
    name: string
    description?: string
    requirements: Array<EventParticipantRequirementDto>
    qrCodeRequired: boolean
}

export type OpenForRegistrationType = 'REGULAR' | 'LATE' | 'CLOSED'

export type Order = {
    field: string
    direction: 'ASC' | 'DESC'
}

export type direction = 'ASC' | 'DESC'

export type Pagination = {
    total: number
    limit: number
    offset: number
    sort: Array<Order>
    search: string
}

/**
 * Captcha challenge id
 */
export type Parameterchallenge = string

export type ParametercompetitionId = string

export type ParametercompetitionRegistrationId = string

export type ParametereventDayId = string

export type ParametereventId = string

/**
 * Captcha solution
 */
export type Parameterinput = number

/**
 * Page size for pagination
 */
export type Parameterlimit = number

/**
 * Result offset for pagination
 */
export type Parameteroffset = number

/**
 * Filter result with space-separated search terms for pagination
 */
export type Parametersearch = string

/**
 * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
 */
export type Parametersort = string

export type ParticipantDto = {
    id: string
    firstname: string
    lastname: string
    year?: number | null
    gender: Gender
    phone?: string | null
    external?: boolean | null
    externalClubName?: string | null
    usedInRegistration: boolean
    createdAt: string
    updatedAt: string
    email?: string
}

export type ParticipantForCompetitionRegistrationTeam = {
    id: string
    firstname: string
    lastname: string
    year: number
    gender: Gender
    external: boolean
    externalClubName?: string
    qrCodeId?: string
    participantRequirementsChecked: Array<CheckedParticipantRequirement>
    currentStatus?: ParticipantScanType
    lastScanAt?: string
    lastScanBy?: AppUserNameDto
}

export type ParticipantForEventDto = {
    id: string
    clubId: string
    clubName: string
    firstname: string
    lastname: string
    year?: number | null
    gender: Gender
    external?: boolean | null
    externalClubName?: string | null
    participantRequirementsChecked?: Array<CheckedParticipantRequirement>
    qrCodeId?: string
    namedParticipantIds?: Array<string>
    email?: string
}

export type ParticipantForExecutionDto = {
    id: string
    namedParticipantId: string
    namedParticipantName: string
    firstName: string
    lastName: string
    year: number
    gender: Gender
    clubId: string
    clubName: string
    competitionRegistrationId: string
    competitionRegistrationName?: string
    external?: boolean
    externalClubName?: string
}

export type ParticipantImportRequest = {
    separator: string
    colFirstname: string
    colLastname: string
    colYear: string
    colGender: string
    colExternalClubname?: string
    valueGenderMale: string
    valueGenderFemale: string
    valueGenderDiverse: string
    colEmail?: string
}

export type ParticipantInfo = {
    participantId: string
    firstName: string
    lastName: string
    namedRole?: string | null
}

export type ParticipantQrAssignmentDto = {
    participantId: string
    firstname: string
    lastname: string
    qrCodeValue?: string | null
    namedParticipantName: string
}

export type ParticipantRequirementCheckForEventConfigDto = {
    requirementId: string
    separator?: string
    charset?: string
    firstnameColName: string
    lastnameColName: string
    yearsColName?: string
    clubColName?: string
    requirementColName?: string
    requirementIsValidValue?: string
}

export type ParticipantRequirementCheckForEventUpsertDto = {
    requirementId: string
    approvedParticipants: Array<CheckedParticipantRequirement>
    namedParticipantId?: string | null
}

export type ParticipantRequirementDto = {
    id: string
    name: string
    description?: string
    optional: boolean
    /**
     * Per App prüfbar
     */
    checkInApp: boolean
}

export type ParticipantRequirementForEventDto = {
    id: string
    name: string
    description?: string
    optional: boolean
    active: boolean
    /**
     * Per App prüfbar
     */
    checkInApp: boolean
    requirements?: Array<NamedParticipantRequirementForEventDto>
}

export type ParticipantRequirementUpsertDto = {
    name: string
    description?: string
    optional?: boolean
    /**
     * Per App prüfbar
     */
    checkInApp?: boolean
}

export type ParticipantScanType = 'ENTRY' | 'EXIT'

export type ParticipantTrackingDto = {
    id: string
    eventId: string
    participantId: string
    firstName: string
    lastName: string
    year: number
    gender: Gender
    clubId: string
    clubName: string
    external: boolean
    externalClubName?: string
    scanType?: ParticipantScanType
    scannedAt?: string
    lastScanBy?: AppUserNameDto
}

export type ParticipantUpsertDto = {
    firstname: string
    lastname: string
    year?: number | null
    gender: Gender
    phone?: string | null
    external?: boolean | null
    externalClubName?: string | null
    email?: string
}

export type PasswordResetInitRequest = {
    email: string
    language: EmailLanguage
    callbackUrl: string
}

export type PasswordResetRequest = {
    password: string
}

export type PossibleSubstitutionParticipantDto = {
    id: string
    firstName: string
    lastName: string
    year: number
    gender: Gender
    external?: boolean
    externalClubName?: string
    registrationId?: string
    registrationName?: string
    namedParticipantId?: string
    namedParticipantName?: string
}

export type PossibleSubstitutionsForParticipantDto = {
    currentlyParticipating: Array<PossibleSubstitutionParticipantDto>
    notCurrentlyParticipating: Array<PossibleSubstitutionParticipantDto>
}

export type Privilege = {
    action: Action
    resource: Resource
    scope: Scope
}

export type PrivilegeDto = {
    id: string
    action: Action
    resource: Resource
    scope: Scope
}

export type ProduceInvoicesRequest = {
    type: RegistrationInvoiceType
}

export type QrCodeAppuserResponse = {
    firstname: string
    lastname: string
    id?: string
    qrCodeId: string
    eventId: string
    type?: QrCodeDtoType
    clubName?: string | null
}

export type QrCodeAppuserUpdate = {
    id: string
    qrCodeId: string
    eventId: string
}

export type QrCodeDtoType = 'Participant' | 'User'

export type QrCodeParticipantResponse = {
    firstname: string
    lastname: string
    id?: string
    qrCodeId: string
    eventId: string
    type?: QrCodeDtoType
    clubName?: string | null
    competitions?: Array<string>
}

export type QrCodeParticipantUpdate = {
    id: string
    qrCodeId: string
    eventId: string
}

export type RatingCategoryDto = {
    id: string
    name: string
    description?: string
}

export type RatingCategoryRequest = {
    name: string
    description?: string
}

export type RegisterRequest = {
    email: string
    password: string
    firstname: string
    lastname: string
    clubname: string
    language: EmailLanguage
    callbackUrl: string
}

export type RegistrationInvoiceType = 'REGULAR' | 'LATE'

export type ResendAccessTokenRequest = {
    callbackUrl: string
}

export type Resource =
    | 'USER'
    | 'EVENT'
    | 'CLUB'
    | 'REGISTRATION'
    | 'INVOICE'
    | 'SUBSTITUTION'
    | 'APP_EVENT_REQUIREMENT'
    | 'APP_QR_MANAGEMENT'
    | 'APP_COMPETITION_CHECK'
    | 'APP_CATERER'
    | 'ADMINISTRATION'
    | 'WEB_DAV'
    | 'RESULT'

export type ResultChallengeClubDto = {
    id: string
    clubName: string
    totalRank: number
    totalResult: number
    relativeRank: number
    relativeResult: number
    teams: Array<ResultChallengeClubTeamDto>
}

export type ResultChallengeClubNamedParticipantDto = {
    id: string
    name: string
    participants: Array<ResultChallengeClubParticipantDto>
}

export type ResultChallengeClubParticipantDto = {
    id: string
    firstName: string
    lastName: string
    gender: Gender
    year: number
    external: boolean
    externalClubName?: string
}

export type ResultChallengeClubTeamDto = {
    competitionRegistrationId: string
    competitionRegistrationName: string | null
    result: number
    competitionId: string
    competitionIdentifier: string
    competitionName: string
    namedParticipants: Array<ResultChallengeClubNamedParticipantDto>
    ratingCategoryDto?: RatingCategoryDto
}

export type ResultChallengeParticipantDto = {
    id: string
    firstName: string
    lastName: string
    rank: number
    result: number
    clubId: string
    clubName: string
    teams: Array<ResultChallengeParticipantTeamDto>
}

export type ResultChallengeParticipantTeamDto = {
    competitionRegistrationId: string
    competitionRegistrationName: string | null
    result: number
    competitionId: string
    competitionIdentifier: string
    competitionName: string
    ratingCategoryDto?: RatingCategoryDto
}

export type RoleDto = {
    id: string
    name: string
    description?: string
    privileges: Array<PrivilegeDto>
}

export type RoleRequest = {
    name: string
    description?: string
    privileges: Array<string>
}

export type RunningMatchInfo = {
    matchId: string
    matchNumber?: number | null
    competitionId: string
    competitionName: string
    categoryName?: string | null
    startTime?: string | null
    elapsedMinutes?: number | null
    placeName?: string | null
    roundNumber?: number | null
    roundName?: string | null
    matchName?: string | null
    executionOrder: number
    teams: Array<RunningMatchTeamInfo>
}

export type RunningMatchTeamInfo = {
    teamId: string
    teamName?: string | null
    startNumber?: number | null
    clubName?: string | null
    currentScore?: number | null
    currentPosition?: number | null
    participants: Array<UpcomingMatchParticipantInfo>
}

export type Scope = 'OWN' | 'GLOBAL'

export type SmtpConfigOverrideDto = {
    host: string
    port: number
    username: string
    password: string
    smtpStrategy: 'SMTP' | 'SMTP_TLS' | 'SMTPS'
    fromAddress: string
    fromName?: string
    localhost?: string
    replyTo?: string
}

export type smtpStrategy = 'SMTP' | 'SMTP_TLS' | 'SMTPS'

export type StartListConfigDto = {
    id: string
    name: string
    colParticipantFirstname?: string
    colParticipantLastname?: string
    colParticipantGender?: string
    colParticipantRole?: string
    colParticipantYear?: string
    colParticipantClub?: string
    colClubName?: string
    colTeamName?: string
    colTeamStartNumber?: string
    colTeamRatingCategory?: string
    colTeamClub?: string
    colTeamDeregistered?: string
    valueTeamDeregistered?: string
    colMatchName?: string
    colMatchStartTime?: string
    colRoundName?: string
    colCompetitionIdentifier?: string
    colCompetitionName?: string
    colCompetitionShortName?: string
    colCompetitionCategory?: string
}

/**
 * At least one column must be specified.
 */
export type StartListConfigRequest = {
    name: string
    colParticipantFirstname?: string
    colParticipantLastname?: string
    colParticipantGender?: string
    colParticipantRole?: string
    colParticipantYear?: string
    colParticipantClub?: string
    colClubName?: string
    colTeamName?: string
    colTeamStartNumber?: string
    colTeamRatingCategory?: string
    colTeamClub?: string
    colTeamDeregistered?: string
    valueTeamDeregistered?: string
    colMatchName?: string
    colMatchStartTime?: string
    colRoundName?: string
    colCompetitionIdentifier?: string
    colCompetitionName?: string
    colCompetitionShortName?: string
    colCompetitionCategory?: string
}

export type StartListFileType = 'PDF' | 'CSV'

export type SubstitutionDto = {
    id: string
    reason?: string
    orderForRound: number
    setupRoundId: string
    setupRoundName: string
    competitionRegistrationId: string
    competitionRegistrationName?: string
    clubId: string
    clubName: string
    namedParticipantId: string
    namedParticipantName: string
    participantOut: SubstitutionParticipantDto
    participantIn: SubstitutionParticipantDto
    swapSubstitution?: string
}

export type SubstitutionParticipantDto = {
    id: string
    firstName: string
    lastName: string
    year: number
    gender: Gender
    external?: boolean
    externalClubName?: string
}

export type SubstitutionRequest = {
    participantOut: string
    participantIn: string
    reason?: string
}

export type TaskDto = {
    id: string
    event: string
    eventName: string
    name: string
    dueDate?: string | null
    description?: string | null
    remark?: string | null
    state: TaskState
    createdAt: string
    updatedAt: string
    responsibleUsers: Array<AppUserNameDto>
}

export type TaskState = 'OPEN' | 'IN_PROGRESS' | 'DONE' | 'CANCELED'

export type TaskUpsertDto = {
    name: string
    dueDate?: string | null
    description?: string | null
    remark?: string | null
    state: TaskState
    responsibleUsers: Array<string>
}

export type TeamForScanOverviewDto = {
    competitionRegistrationId: string
    competitionId: string
    competitionIdentifier: string
    competitionName: string
    clubId: string
    clubName: string
    teamName?: string
    participants: Array<TeamParticipantDto>
}

export type TeamParticipantDto = {
    participantId: string
    firstName: string
    lastName: string
    year: number
    gender: Gender
    external: boolean
    externalClubName?: string
    roleId: string
    role: string
    currentStatus?: ParticipantScanType
    lastScanAt?: string
}

export type TooManyRequestsError = ApiError & {
    details: {
        retryAfter: number
    }
}

export type UnprocessableEntityError = ApiError & {
    details:
        | {
              reason: Invalid
          }
        | {
              result: Invalid
          }
        | unknown
}

export type UpcomingCompetitionMatchInfo = {
    matchId: string
    matchNumber?: number | null
    competitionId: string
    competitionName: string
    categoryName?: string | null
    scheduledStartTime?: string | null
    placeName?: string | null
    roundNumber?: number | null
    roundName?: string | null
    matchName?: string | null
    executionOrder: number
    teams: Array<UpcomingMatchTeamInfo>
}

export type UpcomingMatchParticipantInfo = {
    participantId: string
    firstName: string
    lastName: string
    namedRole?: string | null
    year?: number | null
    gender?: string | null
    externalClubName?: string | null
}

export type UpcomingMatchTeamInfo = {
    teamId: string
    teamName?: string | null
    startNumber?: number | null
    clubName?: string | null
    participants: Array<UpcomingMatchParticipantInfo>
}

export type UpdateAppUserRequest = {
    firstname: string
    lastname: string
    roles: Array<string>
}

export type UpdateCompetitionMatchRequest = {
    startTime?: string
    teams: Array<UpdateCompetitionMatchTeamRequest>
}

export type UpdateCompetitionMatchResultRequest = {
    teamResults: Array<UpdateCompetitionMatchTeamResultRequest>
}

export type UpdateCompetitionMatchRunningStateRequest = {
    currentlyRunning: boolean
}

export type UpdateCompetitionMatchTeamRequest = {
    registrationId: string
    startNumber: number
}

export type UpdateCompetitionMatchTeamResultRequest = {
    registrationId: string
    place?: number
    failed?: boolean
    failedReason?: string
}

export type UpdateEventRequest = {
    name: string
    description?: string
    location?: string
    registrationAvailableFrom?: string
    registrationAvailableTo?: string
    lateRegistrationAvailableTo?: string
    invoicePrefix?: string
    published: boolean
    paymentDueBy?: string
    latePaymentDueBy?: string
    mixedTeamTerm?: string
    challengeResultType?: MatchResultType
    allowSelfSubmission: boolean
}

export type UpdateQrCodeRequirementDto = {
    requirementId: string
    namedParticipantId?: string
    qrCodeRequired: boolean
}

export type UploadMatchResultRequest = {
    config: string
}

export type VerifyRegistrationRequest = {
    token: string
}

export type WebDAVExportEventRequest = {
    [key: string]: unknown
}

export type WebDAVExportRequest = {
    name: string
    events: Array<WebDAVExportEventRequest>
    selectedDatabaseExports: Array<WebDAVExportType>
}

export type WebDAVExportStatusDto = {
    processId: string
    exportFolderName: string
    exportInitializedAt: string
    exportInitializedBy?: AppUserNameDto
    dataExportEvents: Array<string | null>
    fileExportEvents: Array<FileExportEventStatusDto>
    filesExported: number
    totalFilesToExport: number
    filesWithError: number
    dataExported: number
    totalDataToExport: number
    dataWithError: number
}

export type WebDAVExportType =
    | 'INVOICES'
    | 'REGISTRATION_RESULTS'
    | 'DOCUMENTS'
    | 'RESULTS'
    | 'START_LISTS'
    | 'DB_USERS'
    | 'DB_PARTICIPANTS'
    | 'DB_BANK_ACCOUNTS'
    | 'DB_CONTACT_INFORMATION'
    | 'DB_EMAIL_INDIVIDUAL_TEMPLATES'
    | 'DB_EVENT_DOCUMENT_TYPES'
    | 'DB_MATCH_RESULT_IMPORT_CONFIGS'
    | 'DB_STARTLIST_EXPORT_CONFIGS'
    | 'DB_WORK_TYPES'
    | 'DB_PARTICIPANT_REQUIREMENTS'
    | 'DB_RATING_CATEGORIES'
    | 'DB_COMPETITION_CATEGORIES'
    | 'DB_FEES'
    | 'DB_NAMED_PARTICIPANTS'
    | 'DB_COMPETITION_SETUP_TEMPLATES'
    | 'DB_COMPETITION_TEMPLATES'
    | 'DB_EVENT'
    | 'DB_COMPETITION'

export type WebDAVImportEventRequest = {
    eventFolderName: string
    competitionFolderNames: Array<string>
}

export type WebDAVImportOptionsCompetitionDto = {
    competitionId: string
    competitionFolderName: string
}

export type WebDAVImportOptionsDto = {
    data: Array<WebDAVExportType>
    events: Array<WebDAVImportOptionsEventDto>
}

export type WebDAVImportOptionsEventDto = {
    eventId: string
    eventFolderName: string
    competitions: Array<WebDAVImportOptionsCompetitionDto>
}

export type WebDAVImportRequest = {
    folderName: string
    selectedData: Array<WebDAVExportType>
    selectedEvents: Array<WebDAVImportEventRequest>
}

export type WebDAVImportStatusDto = {
    processId: string
    importFolderName: string
    importInitializedAt: string
    importInitializedBy?: AppUserNameDto
    dataImported: number
    totalDataToImport: number
    dataWithError: number
}

export type WorkShiftUpsertDto = {
    workType: string
    timeFrom: string
    timeTo: string
    minUser: number
    maxUser?: number
    remark?: string
    assignedUsers: Array<string>
}

export type WorkShiftWithAssignedUsersDto = {
    id: string
    title: string
    event: string
    timeFrom: string
    timeTo: string
    eventName: string
    workType: string
    workTypeName?: string
    remark?: string
    minUser: number
    maxUser?: number
    createdAt: string
    updatedAt: string
    assignedUsers: Array<AppUserNameDto>
}

export type WorkTypeDto = {
    id: string
    name: string
    description?: string | null
    color?: string
    minUser: number
    maxUser?: number
    createdAt: string
    updatedAt: string
}

export type WorkTypeUpsertDto = {
    name: string
    description?: string
    color?: string
    minUser: number
    maxUser?: number
}

export type UserLoginData = {
    body: LoginRequest
}

export type UserLoginResponse = LoginDto

export type UserLoginError =
    | BadRequestError
    | ApiError
    | UnprocessableEntityError
    | TooManyRequestsError

export type CheckUserLoginResponse = LoginDto | void

export type CheckUserLoginError = ApiError

export type UserLogoutResponse = void

export type UserLogoutError = ApiError

export type GetPrivilegesResponse = Array<PrivilegeDto>

export type GetPrivilegesError = BadRequestError | ApiError

export type GetUsersData = {
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Optional parameter that filters users that have a club assigned to them
         */
        noClub?: boolean
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetUsersResponse = {
    data: Array<AppUserDto>
    pagination: Pagination
}

export type GetUsersError = BadRequestError | ApiError | UnprocessableEntityError

export type GetUserData = {
    path: {
        userId: string
    }
}

export type GetUserResponse = AppUserDto

export type GetUserError = BadRequestError | ApiError

export type UpdateUserData = {
    body: UpdateAppUserRequest
    path: {
        userId: string
    }
}

export type UpdateUserResponse = void

export type UpdateUserError = BadRequestError | ApiError | UnprocessableEntityError

export type RegisterUserData = {
    body: RegisterRequest
    query: {
        /**
         * Captcha challenge id
         */
        challenge: string
        /**
         * Captcha solution
         */
        input: number
    }
}

export type RegisterUserResponse = void

export type RegisterUserError = BadRequestError | ApiError | UnprocessableEntityError

export type GetRegistrationsData = {
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetRegistrationsResponse = {
    data: Array<AppUserRegistrationDto>
    pagination: Pagination
}

export type GetRegistrationsError = BadRequestError | ApiError | UnprocessableEntityError

export type VerifyUserRegistrationData = {
    body: VerifyRegistrationRequest
}

export type VerifyUserRegistrationResponse = unknown

export type VerifyUserRegistrationError = BadRequestError | ApiError | UnprocessableEntityError

export type InviteUserData = {
    body: InviteRequest
}

export type InviteUserResponse = void

export type InviteUserError = BadRequestError | ApiError | UnprocessableEntityError

export type GetInvitationsData = {
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetInvitationsResponse = {
    data: Array<AppUserInvitationDto>
    pagination: Pagination
}

export type GetInvitationsError = BadRequestError | ApiError | UnprocessableEntityError

export type AcceptUserInvitationData = {
    body: AcceptInvitationRequest
}

export type AcceptUserInvitationResponse = unknown

export type AcceptUserInvitationError = BadRequestError | ApiError | UnprocessableEntityError

export type InitPasswordResetData = {
    body: PasswordResetInitRequest
    query: {
        /**
         * Captcha challenge id
         */
        challenge: string
        /**
         * Captcha solution
         */
        input: number
    }
}

export type InitPasswordResetResponse = void

export type InitPasswordResetError =
    | BadRequestError
    | ApiError
    | UnprocessableEntityError
    | TooManyRequestsError

export type ResetPasswordData = {
    body: PasswordResetRequest
    path: {
        passwordResetToken: string
    }
}

export type ResetPasswordResponse = void

export type ResetPasswordError = BadRequestError | ApiError | UnprocessableEntityError

export type GetUsersForEventData = {
    path: {
        eventId: string
    }
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetUsersForEventResponse = {
    data: Array<AppUserForEventDto>
    pagination: Pagination
}

export type GetUsersForEventError = BadRequestError | ApiError | UnprocessableEntityError

export type AddRoleData = {
    body: RoleRequest
}

export type AddRoleResponse = string

export type AddRoleError = BadRequestError | ApiError | UnprocessableEntityError

export type GetRolesData = {
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetRolesResponse = {
    data: Array<RoleDto>
    pagination: Pagination
}

export type GetRolesError = BadRequestError | ApiError | UnprocessableEntityError

export type UpdateRoleData = {
    body: RoleRequest
    path: {
        roleId: string
    }
}

export type UpdateRoleResponse = void

export type UpdateRoleError = BadRequestError | ApiError | UnprocessableEntityError

export type DeleteRoleData = {
    path: {
        roleId: string
    }
}

export type DeleteRoleResponse = void

export type DeleteRoleError = BadRequestError | ApiError

export type AddEventData = {
    body: CreateEventRequest
}

export type AddEventResponse = string

export type AddEventError = BadRequestError | ApiError | UnprocessableEntityError

export type GetEventsData = {
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetEventsResponse = {
    data: Array<EventDto>
    pagination: Pagination
}

export type GetEventsError = BadRequestError | ApiError | UnprocessableEntityError

export type GetPublicEventsData = {
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetPublicEventsResponse = {
    data: Array<EventPublicDto>
    pagination: Pagination
}

export type GetPublicEventsError = BadRequestError | ApiError | UnprocessableEntityError

export type GetEventRegistrationsData = {
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetEventRegistrationsResponse = {
    data: Array<EventRegistrationViewDto>
    pagination: Pagination
}

export type GetEventRegistrationsError = BadRequestError | ApiError | UnprocessableEntityError

export type GetEventData = {
    path: {
        eventId: string
    }
}

export type GetEventResponse = EventDto

export type GetEventError = BadRequestError | ApiError

export type UpdateEventData = {
    body: UpdateEventRequest
    path: {
        eventId: string
    }
}

export type UpdateEventResponse = void

export type UpdateEventError = BadRequestError | ApiError | UnprocessableEntityError

export type DeleteEventData = {
    path: {
        eventId: string
    }
}

export type DeleteEventResponse = void

export type DeleteEventError = BadRequestError | ApiError

export type GetEventInvoicesData = {
    path: {
        eventId: string
    }
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetEventInvoicesResponse = {
    data: Array<InvoiceDto>
    pagination: Pagination
}

export type GetEventInvoicesError = BadRequestError | ApiError | UnprocessableEntityError

export type GetEventInvoicingInfoData = {
    path: {
        eventId: string
    }
}

export type GetEventInvoicingInfoResponse = EventInvoicesInfoDto

export type GetEventInvoicingInfoError = unknown

export type GetEventMatchesData = {
    path: {
        eventId: string
    }
    query?: {
        /**
         * Filter matches by running status
         */
        currentlyRunning?: boolean
        /**
         * Filter matches where teams have no places set
         */
        withoutPlaces?: boolean
    }
}

export type GetEventMatchesResponse = Array<MatchForRunningStatusDto>

export type GetEventMatchesError = BadRequestError | ApiError

export type GetEventCatererTransactionsData = {
    path: {
        eventId: string
    }
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetEventCatererTransactionsResponse = {
    data: Array<CatererTransactionViewDto>
    pagination: Pagination
}

export type GetEventCatererTransactionsError = BadRequestError | ApiError | UnprocessableEntityError

export type AddEventDayData = {
    body: EventDayRequest
    path: {
        eventId: string
    }
}

export type AddEventDayResponse = string

export type AddEventDayError = BadRequestError | ApiError | UnprocessableEntityError

export type GetEventDaysData = {
    path: {
        eventId: string
    }
    query?: {
        /**
         * Optional parameter that filters by competitionId
         */
        competitionId?: string
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetEventDaysResponse = {
    data: Array<EventDayDto>
    pagination: Pagination
}

export type GetEventDaysError = BadRequestError | ApiError | UnprocessableEntityError

export type GetEventDayData = {
    path: {
        eventDayId: string
        eventId: string
    }
}

export type GetEventDayResponse = EventDayDto

export type GetEventDayError = BadRequestError | ApiError

export type UpdateEventDayData = {
    body: EventDayRequest
    path: {
        eventDayId: string
        eventId: string
    }
}

export type UpdateEventDayResponse = void

export type UpdateEventDayError = BadRequestError | ApiError | UnprocessableEntityError

export type DeleteEventDayData = {
    path: {
        eventDayId: string
        eventId: string
    }
}

export type DeleteEventDayResponse = void

export type DeleteEventDayError = BadRequestError | ApiError

export type AssignCompetitionsToEventDayData = {
    body: AssignCompetitionsToDayRequest
    path: {
        eventDayId: string
        eventId: string
    }
}

export type AssignCompetitionsToEventDayResponse = void

export type AssignCompetitionsToEventDayError =
    | BadRequestError
    | ApiError
    | UnprocessableEntityError

export type AddCompetitionData = {
    body: CompetitionPropertiesRequest
    path: {
        eventId: string
    }
}

export type AddCompetitionResponse = string

export type AddCompetitionError = BadRequestError | ApiError | UnprocessableEntityError

export type GetCompetitionsData = {
    path: {
        eventId: string
    }
    query?: {
        /**
         * Optional parameter that filters by eventDayId
         */
        eventDayId?: string
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetCompetitionsResponse = {
    data: Array<CompetitionDto>
    pagination: Pagination
}

export type GetCompetitionsError = BadRequestError | ApiError | UnprocessableEntityError

export type GetCompetitionData = {
    path: {
        competitionId: string
        eventId: string
    }
}

export type GetCompetitionResponse = CompetitionDto

export type GetCompetitionError = BadRequestError | ApiError

export type UpdateCompetitionData = {
    body: CompetitionPropertiesRequest
    path: {
        competitionId: string
        eventId: string
    }
}

export type UpdateCompetitionResponse = void

export type UpdateCompetitionError = BadRequestError | ApiError | UnprocessableEntityError

export type DeleteCompetitionData = {
    path: {
        competitionId: string
        eventId: string
    }
}

export type DeleteCompetitionResponse = void

export type DeleteCompetitionError = BadRequestError | ApiError

export type AssignDaysToCompetitionData = {
    body: AssignDaysToCompetitionRequest
    path: {
        competitionId: string
        eventId: string
    }
}

export type AssignDaysToCompetitionResponse = void

export type AssignDaysToCompetitionError = BadRequestError | ApiError | UnprocessableEntityError

export type GetCompetitionRegistrationsData = {
    path: {
        competitionId: string
        eventId: string
    }
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetCompetitionRegistrationsResponse = {
    data: Array<CompetitionRegistrationDto>
    pagination: Pagination
}

export type GetCompetitionRegistrationsError = BadRequestError | ApiError | UnprocessableEntityError

export type AddCompetitionRegistrationData = {
    body: CompetitionRegistrationTeamUpsertDto
    path: {
        competitionId: string
        eventId: string
    }
    query?: {
        registrationType?: RegistrationInvoiceType
    }
}

export type AddCompetitionRegistrationResponse = CompetitionRegistrationDto

export type AddCompetitionRegistrationError = BadRequestError | ApiError | UnprocessableEntityError

export type UpdateCompetitionRegistrationData = {
    body: CompetitionRegistrationTeamUpsertDto
    path: {
        competitionId: string
        competitionRegistrationId: string
        eventId: string
    }
    query?: {
        ratingCategory?: string
        /**
         * required as managing with global permission
         */
        registrationType?: RegistrationInvoiceType
    }
}

export type UpdateCompetitionRegistrationResponse = void

export type UpdateCompetitionRegistrationError =
    | BadRequestError
    | ApiError
    | UnprocessableEntityError

export type DeleteCompetitionRegistrationData = {
    path: {
        competitionId: string
        competitionRegistrationId: string
        eventId: string
    }
}

export type DeleteCompetitionRegistrationResponse = void

export type DeleteCompetitionRegistrationError = BadRequestError | ApiError

export type DeregisterCompetitionRegistrationData = {
    body: CompetitionDeregistrationRequest
    path: {
        competitionId: string
        competitionRegistrationId: string
        eventId: string
    }
}

export type DeregisterCompetitionRegistrationResponse = void

export type DeregisterCompetitionRegistrationError = BadRequestError | ApiError

export type RevertCompetitionDeregistrationData = {
    path: {
        competitionId: string
        competitionRegistrationId: string
        eventId: string
    }
}

export type RevertCompetitionDeregistrationResponse = void

export type RevertCompetitionDeregistrationError = BadRequestError | ApiError

export type GetCompetitionRegistrationTeamsData = {
    path: {
        competitionId: string
        eventId: string
    }
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetCompetitionRegistrationTeamsResponse = {
    data: Array<CompetitionRegistrationTeamDto>
    pagination: Pagination
}

export type GetCompetitionRegistrationTeamsError =
    | BadRequestError
    | ApiError
    | UnprocessableEntityError

export type UpdateCompetitionSetupData = {
    body: CompetitionSetupDto
    path: {
        competitionId: string
        eventId: string
    }
}

export type UpdateCompetitionSetupResponse = void

export type UpdateCompetitionSetupError = BadRequestError | ApiError | UnprocessableEntityError

export type GetCompetitionSetupData = {
    path: {
        competitionId: string
        eventId: string
    }
}

export type GetCompetitionSetupResponse = CompetitionSetupDto

export type GetCompetitionSetupError = BadRequestError | ApiError

export type GetCompetitionExecutionProgressData = {
    path: {
        competitionId: string
        eventId: string
    }
}

export type GetCompetitionExecutionProgressResponse = CompetitionExecutionProgressDto

export type GetCompetitionExecutionProgressError = BadRequestError | ApiError

export type DeleteCurrentCompetitionExecutionRoundData = {
    path: {
        competitionId: string
        eventId: string
    }
}

export type DeleteCurrentCompetitionExecutionRoundResponse = void

export type DeleteCurrentCompetitionExecutionRoundError = BadRequestError | ApiError

export type CreateNextCompetitionRoundData = {
    path: {
        competitionId: string
        eventId: string
    }
}

export type CreateNextCompetitionRoundResponse = void

export type CreateNextCompetitionRoundError = BadRequestError | ApiError

export type UpdateMatchDataData = {
    body: UpdateCompetitionMatchRequest
    path: {
        competitionId: string
        competitionMatchId: string
        eventId: string
    }
}

export type UpdateMatchDataResponse = void

export type UpdateMatchDataError = BadRequestError | ApiError | UnprocessableEntityError

export type UpdateMatchRunningStateData = {
    body: UpdateCompetitionMatchRunningStateRequest
    path: {
        competitionId: string
        competitionMatchId: string
        eventId: string
    }
}

export type UpdateMatchRunningStateResponse = void

export type UpdateMatchRunningStateError = BadRequestError | ApiError | UnprocessableEntityError

export type UpdateMatchResultsData = {
    body: UpdateCompetitionMatchResultRequest
    path: {
        competitionId: string
        competitionMatchId: string
        eventId: string
    }
}

export type UpdateMatchResultsResponse = void

export type UpdateMatchResultsError = BadRequestError | ApiError | UnprocessableEntityError

export type DownloadStartListData = {
    path: {
        competitionId: string
        competitionMatchId: string
        eventId: string
    }
    query: {
        /**
         * This parameter is required with fileType 'CSV', otherwise discarded.
         */
        config?: string
        fileType: StartListFileType
    }
}

export type DownloadStartListResponse = Blob | File

export type DownloadStartListError = BadRequestError | ApiError

export type GetCompetitionPlacesData = {
    path: {
        competitionId: string
        eventId: string
    }
}

export type GetCompetitionPlacesResponse = Array<CompetitionTeamPlaceDto>

export type GetCompetitionPlacesError = BadRequestError | ApiError

export type AddSubstitutionData = {
    body: SubstitutionRequest
    path: {
        competitionId: string
        eventId: string
    }
}

export type AddSubstitutionResponse = void

export type AddSubstitutionError = BadRequestError | ApiError

export type DeleteSubstitutionData = {
    path: {
        competitionId: string
        eventId: string
        substitutionId: string
    }
}

export type DeleteSubstitutionResponse = void

export type DeleteSubstitutionError = BadRequestError | ApiError

export type GetPossibleSubOutsData = {
    path: {
        competitionId: string
        eventId: string
    }
}

export type GetPossibleSubOutsResponse = Array<ParticipantForExecutionDto>

export type GetPossibleSubOutsError = BadRequestError | ApiError

export type GetPossibleSubInsData = {
    path: {
        competitionId: string
        eventId: string
        participantId: string
    }
}

export type GetPossibleSubInsResponse = PossibleSubstitutionsForParticipantDto

export type GetPossibleSubInsError = BadRequestError | ApiError

export type GetRegistrationDocumentsData = {
    path: {
        eventId: string
    }
}

export type GetRegistrationDocumentsResponse = Array<EventRegistrationDocumentTypeDto>

export type GetRegistrationDocumentsError = BadRequestError | ApiError | UnprocessableEntityError

export type AddDocumentsData = {
    body: {
        documentType?: string
        files?: Array<Blob | File>
    }
    path: {
        eventId: string
    }
}

export type AddDocumentsResponse = void

export type AddDocumentsError = BadRequestError | ApiError | UnprocessableEntityError

export type GetDocumentsData = {
    path: {
        eventId: string
    }
    query?: {
        documentType?: string
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetDocumentsResponse = {
    data: Array<EventDocumentDto>
    pagination: Pagination
}

export type GetDocumentsError = BadRequestError | ApiError | UnprocessableEntityError

export type DownloadDocumentData = {
    path: {
        eventDocumentId: string
        eventId: string
    }
}

export type DownloadDocumentResponse = Blob | File

export type DownloadDocumentError = BadRequestError | ApiError

export type UpdateDocumentData = {
    body: EventDocumentRequest
    path: {
        eventDocumentId: string
        eventId: string
    }
}

export type UpdateDocumentResponse = void

export type UpdateDocumentError = BadRequestError | ApiError | UnprocessableEntityError

export type DeleteDocumentData = {
    path: {
        eventDocumentId: string
        eventId: string
    }
}

export type DeleteDocumentResponse = void

export type DeleteDocumentError = BadRequestError | ApiError

export type GetParticipantTrackingsData = {
    path: {
        eventId: string
    }
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetParticipantTrackingsResponse = {
    data: Array<ParticipantTrackingDto>
    pagination: Pagination
}

export type GetParticipantTrackingsError = BadRequestError | ApiError | UnprocessableEntityError

export type AddCompetitionTemplateData = {
    body: CompetitionPropertiesRequest
}

export type AddCompetitionTemplateResponse = string

export type AddCompetitionTemplateError = BadRequestError | ApiError | UnprocessableEntityError

export type GetCompetitionTemplatesData = {
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetCompetitionTemplatesResponse = {
    data: Array<CompetitionTemplateDto>
    pagination: Pagination
}

export type GetCompetitionTemplatesError = BadRequestError | ApiError | UnprocessableEntityError

export type GetCompetitionTemplateData = {
    path: {
        competitionTemplateId: string
    }
}

export type GetCompetitionTemplateResponse = CompetitionTemplateDto

export type GetCompetitionTemplateError = BadRequestError | ApiError

export type UpdateCompetitionTemplateData = {
    body: CompetitionPropertiesRequest
    path: {
        competitionTemplateId: string
    }
}

export type UpdateCompetitionTemplateResponse = void

export type UpdateCompetitionTemplateError = BadRequestError | ApiError | UnprocessableEntityError

export type DeleteCompetitionTemplateData = {
    path: {
        competitionTemplateId: string
    }
}

export type DeleteCompetitionTemplateResponse = void

export type DeleteCompetitionTemplateError = BadRequestError | ApiError

export type AddCompetitionCategoryData = {
    body: CompetitionCategoryRequest
}

export type AddCompetitionCategoryResponse = string

export type AddCompetitionCategoryError = BadRequestError | ApiError | UnprocessableEntityError

export type GetCompetitionCategoriesResponse = {
    data: Array<CompetitionCategoryDto>
    pagination: Pagination
}

export type GetCompetitionCategoriesError = BadRequestError | ApiError | UnprocessableEntityError

export type UpdateCompetitionCategoryData = {
    body: CompetitionCategoryRequest
    path: {
        competitionCategoryId: string
    }
}

export type UpdateCompetitionCategoryResponse = void

export type UpdateCompetitionCategoryError = BadRequestError | ApiError | UnprocessableEntityError

export type DeleteCompetitionCategoryData = {
    path: {
        competitionCategoryId: string
    }
}

export type DeleteCompetitionCategoryResponse = void

export type DeleteCompetitionCategoryError = BadRequestError | ApiError

export type AddNamedParticipantData = {
    body: NamedParticipantRequest
}

export type AddNamedParticipantResponse = string

export type AddNamedParticipantError = BadRequestError | ApiError | UnprocessableEntityError

export type GetNamedParticipantsResponse = {
    data: Array<NamedParticipantDto>
    pagination: Pagination
}

export type GetNamedParticipantsError = BadRequestError | ApiError | UnprocessableEntityError

export type UpdateNamedParticipantData = {
    body: NamedParticipantRequest
    path: {
        namedParticipantId: string
    }
}

export type UpdateNamedParticipantResponse = void

export type UpdateNamedParticipantError = BadRequestError | ApiError | UnprocessableEntityError

export type DeleteNamedParticipantData = {
    path: {
        namedParticipantId: string
    }
}

export type DeleteNamedParticipantResponse = void

export type DeleteNamedParticipantError = BadRequestError | ApiError

export type GetNamedParticipantsForEventData = {
    path: {
        eventId: string
    }
}

export type GetNamedParticipantsForEventResponse = Array<NamedParticipantWithRequirementsDto>

export type GetNamedParticipantsForEventError = BadRequestError | ApiError

export type NewCaptchaResponse = CaptchaDto

export type NewCaptchaError = ApiError

export type AddClubData = {
    body: ClubUpsertDto
}

export type AddClubResponse = string

export type AddClubError = BadRequestError | ApiError | UnprocessableEntityError

export type GetClubsData = {
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetClubsResponse = {
    data: Array<ClubDto>
    pagination: Pagination
}

export type GetClubsError = ApiError

export type GetClubData = {
    path: {
        clubId: string
    }
}

export type GetClubResponse = ClubDto

export type GetClubError = ApiError

export type UpdateClubData = {
    body: ClubUpsertDto
    path: {
        clubId: string
    }
}

export type UpdateClubResponse = void

export type UpdateClubError = BadRequestError | ApiError | UnprocessableEntityError

export type DeleteClubData = {
    path: {
        clubId: string
    }
}

export type DeleteClubResponse = void

export type DeleteClubError = ApiError

export type GetClubUsersData = {
    path: {
        clubId: string
    }
}

export type GetClubUsersResponse = Array<AppUserDto>

export type GetClubUsersError = ApiError

export type GetClubParticipantsData = {
    path: {
        clubId: string
    }
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetClubParticipantsResponse = {
    data: Array<ParticipantDto>
    pagination: Pagination
}

export type GetClubParticipantsError = ApiError

export type AddClubParticipantData = {
    body: ParticipantUpsertDto
    path: {
        clubId: string
    }
}

export type AddClubParticipantResponse = string

export type AddClubParticipantError = BadRequestError | ApiError | UnprocessableEntityError

export type ImportClubParticipantsData = {
    body: {
        request: ParticipantImportRequest
        files: Array<Blob | File>
    }
    path: {
        clubId: string
    }
}

export type ImportClubParticipantsResponse = void

export type ImportClubParticipantsError = BadRequestError | ApiError | UnprocessableEntityError

export type GetClubParticipantData = {
    path: {
        clubId: string
        participantId: string
    }
}

export type GetClubParticipantResponse = ParticipantDto

export type GetClubParticipantError = ApiError

export type UpdateClubParticipantData = {
    body: ParticipantUpsertDto
    path: {
        clubId: string
        participantId: string
    }
}

export type UpdateClubParticipantResponse = void

export type UpdateClubParticipantError = BadRequestError | ApiError | UnprocessableEntityError

export type DeleteClubParticipantData = {
    path: {
        clubId: string
        participantId: string
    }
}

export type DeleteClubParticipantResponse = void

export type DeleteClubParticipantError = ApiError

export type GetClubNamesData = {
    query?: {
        /**
         * Filter for clubs, which registered for this event
         */
        eventId?: string
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetClubNamesResponse = {
    data: Array<ClubSearchDto>
    pagination: Pagination
}

export type GetClubNamesError = ApiError

export type GetRegistrationsForEventData = {
    path: {
        eventId: string
    }
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetRegistrationsForEventResponse = {
    data: Array<EventRegistrationViewDto>
    pagination: Pagination
}

export type GetRegistrationsForEventError = ApiError

export type GetEventRegistrationData = {
    path: {
        eventId: string
        eventRegistrationId: string
    }
}

export type GetEventRegistrationResponse = EventRegistrationViewDto

export type GetEventRegistrationError = ApiError

export type DeleteEventRegistrationData = {
    path: {
        eventId: string
        eventRegistrationId: string
    }
}

export type DeleteEventRegistrationResponse = void

export type DeleteEventRegistrationError = BadRequestError | ApiError

export type GetRegistrationInvoicesData = {
    path: {
        eventId: string
        eventRegistrationId: string
    }
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetRegistrationInvoicesResponse = {
    data: Array<InvoiceDto>
    pagination: Pagination
}

export type GetRegistrationInvoicesError = BadRequestError | ApiError | UnprocessableEntityError

export type GetEventRegistrationTemplateData = {
    path: {
        eventId: string
    }
}

export type GetEventRegistrationTemplateResponse = EventRegistrationTemplateDto

export type GetEventRegistrationTemplateError = ApiError

export type AddEventRegistrationData = {
    body: EventRegistrationUpsertDto
    path: {
        eventId: string
    }
}

export type AddEventRegistrationResponse = string

export type AddEventRegistrationError = BadRequestError | ApiError

export type GetRegistrationResultData = {
    path: {
        eventId: string
    }
    query?: {
        remake?: boolean
    }
}

export type GetRegistrationResultResponse = Blob | File

export type GetRegistrationResultError = BadRequestError | ApiError

export type FinalizeRegistrationsData = {
    path: {
        eventId: string
    }
    query?: {
        /**
         * Whether already set team numbers should be kept
         */
        keepNumbers?: boolean
    }
}

export type FinalizeRegistrationsResponse = void

export type FinalizeRegistrationsError = BadRequestError | ApiError

export type GetRegistrationsWithoutTeamNumberData = {
    path: {
        eventId: string
    }
}

export type GetRegistrationsWithoutTeamNumberResponse =
    Array<CompetitionRegistrationsWithoutTeamNumberDto>

export type GetRegistrationsWithoutTeamNumberError = BadRequestError | ApiError

export type AddFeeData = {
    body: FeeRequest
}

export type AddFeeResponse = string

export type AddFeeError = BadRequestError | ApiError | UnprocessableEntityError

export type GetFeesData = {
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetFeesResponse = {
    data: Array<FeeDto>
    pagination: Pagination
}

export type GetFeesError = BadRequestError | ApiError | UnprocessableEntityError

export type UpdateFeeData = {
    body: FeeRequest
    path: {
        feeId: string
    }
}

export type UpdateFeeResponse = void

export type UpdateFeeError = BadRequestError | ApiError | UnprocessableEntityError

export type DeleteFeeData = {
    path: {
        feeId: string
    }
}

export type DeleteFeeResponse = void

export type DeleteFeeError = BadRequestError | ApiError

export type AddDocumentTypeData = {
    body: EventDocumentTypeRequest
}

export type AddDocumentTypeResponse = string

export type AddDocumentTypeError = BadRequestError | ApiError | UnprocessableEntityError

export type GetDocumentTypesData = {
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetDocumentTypesResponse = {
    data: Array<EventDocumentTypeDto>
    pagination: Pagination
}

export type GetDocumentTypesError = BadRequestError | ApiError | UnprocessableEntityError

export type UpdateDocumentTypeData = {
    body: EventDocumentTypeRequest
    path: {
        eventDocumentTypeId: string
    }
}

export type UpdateDocumentTypeResponse = void

export type UpdateDocumentTypeError = BadRequestError | ApiError | UnprocessableEntityError

export type DeleteDocumentTypeData = {
    path: {
        eventDocumentTypeId: string
    }
}

export type DeleteDocumentTypeResponse = void

export type DeleteDocumentTypeError = BadRequestError | ApiError

export type GetParticipantRequirementsForEventData = {
    path: {
        eventId: string
    }
}

export type GetParticipantRequirementsForEventResponse = {
    data: Array<ParticipantRequirementForEventDto>
    pagination: Pagination
}

export type GetParticipantRequirementsForEventError =
    | BadRequestError
    | ApiError
    | UnprocessableEntityError

export type CheckParticipantRequirementsForEventData = {
    body: {
        config?: ParticipantRequirementCheckForEventConfigDto
        files?: Array<Blob | File>
    }
    path: {
        eventId: string
    }
}

export type CheckParticipantRequirementsForEventResponse = void

export type CheckParticipantRequirementsForEventError =
    | BadRequestError
    | ApiError
    | UnprocessableEntityError

export type ApproveParticipantRequirementsForEventData = {
    body: ParticipantRequirementCheckForEventUpsertDto
    path: {
        eventId: string
    }
}

export type ApproveParticipantRequirementsForEventResponse = void

export type ApproveParticipantRequirementsForEventError =
    | BadRequestError
    | ApiError
    | UnprocessableEntityError

export type GetActiveParticipantRequirementsForEventData = {
    path: {
        eventId: string
    }
}

export type GetActiveParticipantRequirementsForEventResponse = {
    data: Array<ParticipantRequirementForEventDto>
    pagination: Pagination
}

export type GetActiveParticipantRequirementsForEventError =
    | BadRequestError
    | ApiError
    | UnprocessableEntityError

export type ActivateParticipantRequirementForEventData = {
    path: {
        eventId: string
        participantRequirementId: string
    }
}

export type ActivateParticipantRequirementForEventResponse = void

export type ActivateParticipantRequirementForEventError =
    | BadRequestError
    | ApiError
    | UnprocessableEntityError

export type RemoveParticipantRequirementForEventData = {
    path: {
        eventId: string
        participantRequirementId: string
    }
}

export type RemoveParticipantRequirementForEventResponse = void

export type RemoveParticipantRequirementForEventError =
    | BadRequestError
    | ApiError
    | UnprocessableEntityError

export type AssignRequirementToNamedParticipantData = {
    body: AssignRequirementToNamedParticipantDto
    path: {
        eventId: string
        namedParticipantId: string
    }
}

export type AssignRequirementToNamedParticipantResponse = void

export type AssignRequirementToNamedParticipantError =
    | BadRequestError
    | ApiError
    | UnprocessableEntityError

export type RemoveRequirementFromNamedParticipantData = {
    body: AssignRequirementToNamedParticipantDto
    path: {
        eventId: string
        namedParticipantId: string
    }
}

export type RemoveRequirementFromNamedParticipantResponse = void

export type RemoveRequirementFromNamedParticipantError =
    | BadRequestError
    | ApiError
    | UnprocessableEntityError

export type UpdateQrCodeRequirementData = {
    body: UpdateQrCodeRequirementDto
    path: {
        eventId: string
    }
}

export type UpdateQrCodeRequirementResponse = void

export type UpdateQrCodeRequirementError = BadRequestError | ApiError | UnprocessableEntityError

export type GetParticipantRequirementsForParticipantData = {
    path: {
        eventId: string
        participantId: string
    }
    query: {
        onlyForApp: boolean
    }
}

export type GetParticipantRequirementsForParticipantResponse =
    Array<ParticipantRequirementForEventDto>

export type GetParticipantRequirementsForParticipantError =
    | BadRequestError
    | ApiError
    | UnprocessableEntityError

export type GetParticipantsForEventData = {
    path: {
        eventId: string
    }
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetParticipantsForEventResponse = {
    data: Array<ParticipantForEventDto>
    pagination: Pagination
}

export type GetParticipantsForEventError = BadRequestError | ApiError | UnprocessableEntityError

export type GetParticipantsForEventInAppData = {
    path: {
        eventId: string
    }
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetParticipantsForEventInAppResponse = {
    data: Array<ParticipantForEventDto>
    pagination: Pagination
}

export type GetParticipantsForEventInAppError =
    | BadRequestError
    | ApiError
    | UnprocessableEntityError

export type GetTeamsByParticipantQrCodeData = {
    path: {
        eventId: string
        qrCode: string
    }
}

export type GetTeamsByParticipantQrCodeResponse = Array<TeamForScanOverviewDto>

export type GetTeamsByParticipantQrCodeError = BadRequestError | ApiError

export type CheckInOutParticipantData = {
    path: {
        eventId: string
        participantId: string
    }
    query: {
        checkIn: boolean
    }
}

export type CheckInOutParticipantResponse = unknown

export type CheckInOutParticipantError = BadRequestError | ApiError

export type UpdateParticipantRequirementData = {
    body: ParticipantRequirementUpsertDto
    path: {
        participantRequirementId: string
    }
}

export type UpdateParticipantRequirementResponse = void

export type UpdateParticipantRequirementError =
    | BadRequestError
    | ApiError
    | UnprocessableEntityError

export type DeleteParticipantRequirementData = {
    path: {
        participantRequirementId: string
    }
}

export type DeleteParticipantRequirementResponse = void

export type DeleteParticipantRequirementError = BadRequestError | ApiError

export type AddParticipantRequirementData = {
    body: ParticipantRequirementUpsertDto
}

export type AddParticipantRequirementResponse = string

export type AddParticipantRequirementError = BadRequestError | ApiError | UnprocessableEntityError

export type GetParticipantRequirementsResponse = {
    data: Array<ParticipantRequirementDto>
    pagination: Pagination
}

export type GetParticipantRequirementsError = BadRequestError | ApiError | UnprocessableEntityError

export type AddCompetitionSetupTemplateData = {
    body: CompetitionSetupTemplateRequest
}

export type AddCompetitionSetupTemplateResponse = string

export type AddCompetitionSetupTemplateError = BadRequestError | ApiError | UnprocessableEntityError

export type GetCompetitionSetupTemplatesData = {
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetCompetitionSetupTemplatesResponse = {
    data: Array<CompetitionSetupTemplateDto>
    pagination: Pagination
}

export type GetCompetitionSetupTemplatesError =
    | BadRequestError
    | ApiError
    | UnprocessableEntityError

export type GetCompetitionSetupTemplateData = {
    path: {
        competitionSetupTemplateId: string
    }
}

export type GetCompetitionSetupTemplateResponse = CompetitionSetupTemplateDto

export type GetCompetitionSetupTemplateError = BadRequestError | ApiError

export type UpdateCompetitionSetupTemplateData = {
    body: CompetitionSetupTemplateRequest
    path: {
        competitionSetupTemplateId: string
    }
}

export type UpdateCompetitionSetupTemplateResponse = void

export type UpdateCompetitionSetupTemplateError =
    | BadRequestError
    | ApiError
    | UnprocessableEntityError

export type DeleteCompetitionSetupTemplateData = {
    path: {
        competitionSetupTemplateId: string
    }
}

export type DeleteCompetitionSetupTemplateResponse = void

export type DeleteCompetitionSetupTemplateError = BadRequestError | ApiError

export type GetCompetitionSetupTemplateOverviewResponse = Array<CompetitionSetupTemplateOverviewDto>

export type GetCompetitionSetupTemplateOverviewError = ApiError

export type GetDocumentTemplatesData = {
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetDocumentTemplatesResponse = {
    data: Array<DocumentTemplateDto>
    pagination: Pagination
}

export type GetDocumentTemplatesError = BadRequestError | ApiError | UnprocessableEntityError

export type AddDocumentTemplateData = {
    body: {
        request: DocumentTemplateRequest
        files: Array<Blob | File>
    }
}

export type AddDocumentTemplateResponse = void

export type AddDocumentTemplateError = BadRequestError | ApiError | UnprocessableEntityError

export type UpdateDocumentTemplateData = {
    body: DocumentTemplateRequest
    path: {
        documentTemplateId: string
    }
}

export type UpdateDocumentTemplateResponse = void

export type UpdateDocumentTemplateError = BadRequestError | ApiError | UnprocessableEntityError

export type DeleteDocumentTemplateData = {
    path: {
        documentTemplateId: string
    }
}

export type DeleteDocumentTemplateResponse = void

export type DeleteDocumentTemplateError = BadRequestError | ApiError

export type DownloadDocumentTemplateSampleData = {
    path: {
        documentTemplateId: string
    }
    query: {
        documentType: DocumentType
    }
}

export type DownloadDocumentTemplateSampleResponse = Blob | File

export type DownloadDocumentTemplateSampleError = BadRequestError | ApiError

export type GetDocumentTemplateTypesResponse = Array<DocumentTypeDto>

export type GetDocumentTemplateTypesError = BadRequestError | ApiError | UnprocessableEntityError

export type AssignDocumentTemplateData = {
    body: AssignDocumentTemplateRequest
    path: {
        documentType: DocumentType
    }
}

export type AssignDocumentTemplateResponse = void

export type AssignDocumentTemplateError = BadRequestError | ApiError | UnprocessableEntityError

export type AddTaskData = {
    body: TaskUpsertDto
    path: {
        eventId: string
    }
}

export type AddTaskResponse = string

export type AddTaskError = BadRequestError | ApiError | UnprocessableEntityError

export type GetTasksData = {
    path: {
        eventId: string
    }
}

export type GetTasksResponse = {
    data: Array<TaskDto>
    pagination: Pagination
}

export type GetTasksError = BadRequestError | ApiError | UnprocessableEntityError

export type UpdateTaskData = {
    body: TaskUpsertDto
    path: {
        eventId: string
        taskId: string
    }
}

export type UpdateTaskResponse = void

export type UpdateTaskError = BadRequestError | ApiError | UnprocessableEntityError

export type DeleteTaskData = {
    path: {
        eventId: string
        taskId: string
    }
}

export type DeleteTaskResponse = void

export type DeleteTaskError = BadRequestError | ApiError

export type GetOpenTasksForUserData = {
    path: {
        userId: string
    }
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetOpenTasksForUserResponse = {
    data: Array<TaskDto>
    pagination: Pagination
}

export type GetOpenTasksForUserError = BadRequestError | ApiError | UnprocessableEntityError

export type GetBankAccountsData = {
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetBankAccountsResponse = {
    data: Array<BankAccountDto>
    pagination: Pagination
}

export type GetBankAccountsError = BadRequestError | ApiError | UnprocessableEntityError

export type AddBankAccountData = {
    body: BankAccountRequest
}

export type AddBankAccountResponse = string

export type AddBankAccountError = BadRequestError | ApiError | UnprocessableEntityError

export type UpdateBankAccountData = {
    body: BankAccountRequest
    path: {
        bankAccountId: string
    }
}

export type UpdateBankAccountResponse = void

export type UpdateBankAccountError = BadRequestError | ApiError | UnprocessableEntityError

export type DeleteBankAccountData = {
    path: {
        bankAccountId: string
    }
}

export type DeleteBankAccountResponse = void

export type DeleteBankAccountError = BadRequestError | ApiError

export type GetAssignedBankAccountData = {
    query?: {
        event?: string
    }
}

export type GetAssignedBankAccountResponse = AssignedBankAccountDto

export type GetAssignedBankAccountError = BadRequestError | ApiError | UnprocessableEntityError

export type AssignBankAccountData = {
    body: AssignBankAccountRequest
}

export type AssignBankAccountResponse = void

export type AssignBankAccountError = BadRequestError | ApiError | UnprocessableEntityError

export type GetAppUsersWithQrCodeForEventData = {
    path: {
        eventId: string
    }
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetAppUsersWithQrCodeForEventResponse = {
    data: Array<AppUserWithQrCodeDto>
    pagination: Pagination
}

export type GetAppUsersWithQrCodeForEventError = BadRequestError | ApiError

export type DeleteQrCodeForEventData = {
    path: {
        eventId: string
        qrCodeId: string
    }
}

export type DeleteQrCodeForEventResponse = void

export type DeleteQrCodeForEventError = BadRequestError | ApiError

export type ProduceInvoicesForEventRegistrationsData = {
    body: ProduceInvoicesRequest
    path: {
        eventId: string
    }
}

export type ProduceInvoicesForEventRegistrationsResponse = void

export type ProduceInvoicesForEventRegistrationsError = BadRequestError | ApiError

export type GetContactsData = {
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetContactsResponse = {
    data: Array<ContactInformationDto>
    pagination: Pagination
}

export type GetContactsError = BadRequestError | ApiError | UnprocessableEntityError

export type AddContactData = {
    body: ContactInformationRequest
}

export type AddContactResponse = string

export type AddContactError = BadRequestError | ApiError | UnprocessableEntityError

export type UpdateContactData = {
    body: ContactInformationRequest
    path: {
        contactId: string
    }
}

export type UpdateContactResponse = void

export type UpdateContactError = BadRequestError | ApiError | UnprocessableEntityError

export type DeleteContactData = {
    path: {
        contactId: string
    }
}

export type DeleteContactResponse = void

export type DeleteContactError = BadRequestError | ApiError

export type GetAssignedContactData = {
    query?: {
        event?: string
    }
}

export type GetAssignedContactResponse = AssignedContactInformationDto

export type GetAssignedContactError = BadRequestError | ApiError | UnprocessableEntityError

export type AssignContactData = {
    body: AssignContactInformationRequest
}

export type AssignContactResponse = void

export type AssignContactError = BadRequestError | ApiError | UnprocessableEntityError

export type AddWorkTypeData = {
    body: WorkTypeUpsertDto
}

export type AddWorkTypeResponse = string

export type AddWorkTypeError = BadRequestError | ApiError | UnprocessableEntityError

export type GetWorkTypesResponse = {
    data: Array<WorkTypeDto>
    pagination: Pagination
}

export type GetWorkTypesError = BadRequestError | ApiError | UnprocessableEntityError

export type UpdateWorkTypeData = {
    body: WorkTypeUpsertDto
    path: {
        workTypeId: string
    }
}

export type UpdateWorkTypeResponse = void

export type UpdateWorkTypeError = BadRequestError | ApiError | UnprocessableEntityError

export type DeleteWorkTypeData = {
    path: {
        workTypeId: string
    }
}

export type DeleteWorkTypeResponse = void

export type DeleteWorkTypeError = BadRequestError | ApiError

export type AddWorkShiftData = {
    body: WorkShiftUpsertDto
    path: {
        eventId: string
    }
}

export type AddWorkShiftResponse = string

export type AddWorkShiftError = BadRequestError | ApiError | UnprocessableEntityError

export type GetWorkShiftsData = {
    path: {
        eventId: string
    }
    query?: {
        timeFrom?: string
        timeTo?: string
    }
}

export type GetWorkShiftsResponse = {
    data: Array<WorkShiftWithAssignedUsersDto>
    pagination: Pagination
}

export type GetWorkShiftsError = BadRequestError | ApiError | UnprocessableEntityError

export type UpdateWorkShiftData = {
    body: WorkShiftUpsertDto
    path: {
        eventId: string
        workShiftId: string
    }
}

export type UpdateWorkShiftResponse = void

export type UpdateWorkShiftError = BadRequestError | ApiError | UnprocessableEntityError

export type DeleteWorkShiftData = {
    path: {
        eventId: string
        workShiftId: string
    }
}

export type DeleteWorkShiftResponse = void

export type DeleteWorkShiftError = BadRequestError | ApiError

export type GetWorkShiftsForUserData = {
    path: {
        userId: string
    }
    query?: {
        timeFrom?: string
        timeTo?: string
    }
}

export type GetWorkShiftsForUserResponse = {
    data: Array<WorkShiftWithAssignedUsersDto>
    pagination: Pagination
}

export type GetWorkShiftsForUserError = BadRequestError | ApiError | UnprocessableEntityError

export type GetInvoicesData = {
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetInvoicesResponse = {
    data: Array<InvoiceDto>
    pagination: Pagination
}

export type GetInvoicesError = BadRequestError | ApiError | UnprocessableEntityError

export type DownloadInvoiceResponse = Blob | File

export type DownloadInvoiceError = BadRequestError | ApiError

export type SetInvoicePaidData = {
    body: InvoiceUpdateRequestDto
}

export type SetInvoicePaidResponse = void

export type SetInvoicePaidError = BadRequestError | ApiError

export type AddStartListConfigData = {
    body: StartListConfigRequest
}

export type AddStartListConfigResponse = string

export type AddStartListConfigError = BadRequestError | ApiError | UnprocessableEntityError

export type GetStartListConfigsData = {
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetStartListConfigsResponse = {
    data: Array<StartListConfigDto>
    pagination: Pagination
}

export type GetStartListConfigsError = BadRequestError | ApiError | UnprocessableEntityError

export type UpdateStartListConfigData = {
    body: StartListConfigRequest
    path: {
        startListConfigId: string
    }
}

export type UpdateStartListConfigResponse = void

export type UpdateStartListConfigError = BadRequestError | ApiError

export type DeleteStartListConfigData = {
    path: {
        startListConfigId: string
    }
}

export type DeleteStartListConfigResponse = void

export type DeleteStartListConfigError = BadRequestError | ApiError

export type GetUpcomingMatchesData = {
    path: {
        eventId: string
    }
    query: {
        limit: number
    }
}

export type GetUpcomingMatchesResponse = Array<UpcomingCompetitionMatchInfo>

export type GetUpcomingMatchesError = ApiError

export type GetLatestMatchResultsData = {
    path: {
        eventId: string
    }
    query: {
        competitionId?: string
        limit: number
    }
}

export type GetLatestMatchResultsResponse = Array<LatestMatchResultInfo>

export type GetLatestMatchResultsError = ApiError

export type GetRunningMatchesData = {
    path: {
        eventId: string
    }
    query: {
        limit: number
    }
}

export type GetRunningMatchesResponse = Array<RunningMatchInfo>

export type GetRunningMatchesError = ApiError

export type GetInfoViewsData = {
    path: {
        eventId: string
    }
}

export type GetInfoViewsResponse = Array<InfoViewConfigurationDto>

export type GetInfoViewsError = ApiError

export type CreateInfoViewData = {
    body: InfoViewConfigurationRequest
    path: {
        eventId: string
    }
}

export type CreateInfoViewResponse = InfoViewConfigurationDto

export type CreateInfoViewError = BadRequestError | ApiError | UnprocessableEntityError

export type UpdateInfoViewData = {
    body: InfoViewConfigurationRequest
    path: {
        eventId: string
        viewId: string
    }
}

export type UpdateInfoViewResponse = InfoViewConfigurationDto

export type UpdateInfoViewError = BadRequestError | ApiError | UnprocessableEntityError

export type DeleteInfoViewData = {
    path: {
        eventId: string
        viewId: string
    }
}

export type DeleteInfoViewResponse = void

export type DeleteInfoViewError = ApiError

export type AddRatingCategoryData = {
    body: RatingCategoryRequest
}

export type AddRatingCategoryResponse = string

export type AddRatingCategoryError = BadRequestError | ApiError | UnprocessableEntityError

export type GetRatingCategoriesData = {
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetRatingCategoriesResponse = {
    data: Array<RatingCategoryDto>
    pagination: Pagination
}

export type GetRatingCategoriesError = BadRequestError | ApiError | UnprocessableEntityError

export type UpdateRatingCategoryData = {
    body: RatingCategoryRequest
    path: {
        ratingCategoryId: string
    }
}

export type UpdateRatingCategoryResponse = void

export type UpdateRatingCategoryError = BadRequestError | ApiError

export type DeleteRatingCategoryData = {
    path: {
        ratingCategoryId: string
    }
}

export type DeleteRatingCategoryResponse = void

export type DeleteRatingCategoryError = BadRequestError | ApiError

export type AddMatchResultImportConfigData = {
    body: MatchResultImportConfigRequest
}

export type AddMatchResultImportConfigResponse = string

export type AddMatchResultImportConfigError = BadRequestError | ApiError | UnprocessableEntityError

export type GetMatchResultImportConfigsData = {
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetMatchResultImportConfigsResponse = {
    data: Array<MatchResultImportConfigDto>
    pagination: Pagination
}

export type GetMatchResultImportConfigsError = BadRequestError | ApiError | UnprocessableEntityError

export type UpdateMatchResultImportConfigData = {
    body: MatchResultImportConfigRequest
    path: {
        matchResultImportConfigId: string
    }
}

export type UpdateMatchResultImportConfigResponse = void

export type UpdateMatchResultImportConfigError = BadRequestError | ApiError

export type DeleteMatchResultImportConfigData = {
    path: {
        matchResultImportConfigId: string
    }
}

export type DeleteMatchResultImportConfigResponse = void

export type DeleteMatchResultImportConfigError = BadRequestError | ApiError

export type UploadResultFileData = {
    body: {
        request: UploadMatchResultRequest
        files: Array<Blob | File>
    }
    path: {
        competitionId: string
        competitionMatchId: string
        eventId: string
    }
}

export type UploadResultFileResponse = void

export type UploadResultFileError = BadRequestError | ApiError | UnprocessableEntityError

export type CheckQrCodeData = {
    path: {
        qrCodeId: string
    }
}

export type CheckQrCodeResponse = (QrCodeParticipantResponse | QrCodeAppuserResponse) | void

export type CheckQrCodeError = BadRequestError | ApiError | UnprocessableEntityError

export type DeleteQrCodeData = {
    path: {
        qrCodeId: string
    }
}

export type DeleteQrCodeResponse = void

export type DeleteQrCodeError = BadRequestError | ApiError

export type UpdateQrCodeAppuserData = {
    body: QrCodeAppuserUpdate
}

export type UpdateQrCodeAppuserResponse = void

export type UpdateQrCodeAppuserError = BadRequestError | ApiError | UnprocessableEntityError

export type UpdateQrCodeParticipantData = {
    body: QrCodeParticipantUpdate
}

export type UpdateQrCodeParticipantResponse = void

export type UpdateQrCodeParticipantError = BadRequestError | ApiError | UnprocessableEntityError

export type CreateCateringTransactionData = {
    body: CatererTransactionRequest
}

export type CreateCateringTransactionResponse = void

export type CreateCateringTransactionError = BadRequestError | ApiError | UnprocessableEntityError

export type GetQrAssignmentParticipantsData = {
    query: {
        clubId?: string
        eventId: string
    }
}

export type GetQrAssignmentParticipantsResponse = Array<GroupedParticipantQrAssignmentDto>

export type GetQrAssignmentParticipantsError = BadRequestError | ApiError

export type DownloadEventResultsData = {
    path: {
        eventId: string
    }
}

export type DownloadEventResultsResponse = Blob | File

export type DownloadEventResultsError = BadRequestError | ApiError

export type GetCompetitionsHavingResultsData = {
    path: {
        eventId: string
    }
    query?: {
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetCompetitionsHavingResultsResponse = {
    data: Array<CompetitionChoiceDto>
    pagination: Pagination
}

export type GetCompetitionsHavingResultsError =
    | BadRequestError
    | ApiError
    | UnprocessableEntityError

export type GetChallengeClubResultsData = {
    path: {
        eventId: string
    }
    query?: {
        /**
         * Optional parameter to filter by competition
         */
        competition?: string
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Optional parameter to filter by rating category
         */
        ratingCategory?: string
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetChallengeClubResultsResponse = {
    data: Array<ResultChallengeClubDto>
    pagination: Pagination
}

export type GetChallengeClubResultsError = BadRequestError | ApiError | UnprocessableEntityError

export type GetChallengeParticipantResultsData = {
    path: {
        eventId: string
    }
    query?: {
        /**
         * Optional parameter to filter by competition
         */
        competition?: string
        /**
         * Page size for pagination
         */
        limit?: number
        /**
         * Result offset for pagination
         */
        offset?: number
        /**
         * Optional parameter to filter by rating category
         */
        ratingCategory?: string
        /**
         * Filter result with space-separated search terms for pagination
         */
        search?: string
        /**
         * Fields with direction (as JSON [{field: <field>, direction: ASC | DESC}, ...]) sorting result for pagination
         */
        sort?: string
    }
}

export type GetChallengeParticipantResultsResponse = {
    data: Array<ResultChallengeParticipantDto>
    pagination: Pagination
}

export type GetChallengeParticipantResultsError =
    | BadRequestError
    | ApiError
    | UnprocessableEntityError

export type GetEventsForExportResponse = Array<EventForExportDto>

export type GetEventsForExportError = BadRequestError | ApiError

export type ExportDataByWebDavData = {
    body: WebDAVExportRequest
}

export type ExportDataByWebDavResponse = void

export type ExportDataByWebDavError = BadRequestError | ApiError

export type GetWebDavExportStatusResponse = Array<WebDAVExportStatusDto>

export type GetWebDavExportStatusError = BadRequestError | ApiError

export type ImportDataFromWebDavData = {
    body: WebDAVImportRequest
}

export type ImportDataFromWebDavResponse = void

export type ImportDataFromWebDavError = BadRequestError | ApiError

export type GetWebDavImportStatusResponse = Array<WebDAVImportStatusDto>

export type GetWebDavImportStatusError = BadRequestError | ApiError

export type GetWebDavImportOptionFoldersResponse = Array<string>

export type GetWebDavImportOptionFoldersError = BadRequestError | ApiError

export type GetWebDavImportOptionTypesData = {
    path: {
        folderName: string
    }
}

export type GetWebDavImportOptionTypesResponse = WebDAVImportOptionsDto

export type GetWebDavImportOptionTypesError = BadRequestError | ApiError

export type SubmitChallengeTeamResultsData = {
    body: {
        request: CompetitionChallengeResultRequest
        files: Array<Blob | File>
    }
    path: {
        competitionId: string
        competitionRegistrationId: string
        eventId: string
    }
}

export type SubmitChallengeTeamResultsResponse = void

export type SubmitChallengeTeamResultsError = BadRequestError | ApiError

export type DownloadMatchTeamResultDocumentData = {
    path: {
        competitionId: string
        eventId: string
        resultDocumentId: string
    }
}

export type DownloadMatchTeamResultDocumentResponse = Blob | File

export type DownloadMatchTeamResultDocumentError = BadRequestError | ApiError

export type GetSmtpConfigResponse = SmtpConfigOverrideDto

export type GetSmtpConfigError = ApiError

export type SetSmtpOverrideData = {
    body: SmtpConfigOverrideDto
}

export type SetSmtpOverrideResponse = void

export type SetSmtpOverrideError = BadRequestError | ApiError | UnprocessableEntityError

export type DeleteSmtpOverrideResponse = void

export type DeleteSmtpOverrideError = ApiError

export type ResendAccessTokenData = {
    body: ResendAccessTokenRequest
    path: {
        eventId: string
        participantId: string
    }
}

export type ResendAccessTokenResponse = void

export type ResendAccessTokenError = BadRequestError | ApiError | UnprocessableEntityError
