// This file is auto-generated by @hey-api/openapi-ts

import {
    createClient,
    createConfig,
    type OptionsLegacyParser,
    formDataBodySerializer,
} from '@hey-api/client-fetch'
import type {
    UserLoginData,
    UserLoginError,
    UserLoginResponse,
    CheckUserLoginError,
    CheckUserLoginResponse,
    UserLogoutError,
    UserLogoutResponse,
    GetPrivilegesError,
    GetPrivilegesResponse,
    GetUsersData,
    GetUsersError,
    GetUsersResponse,
    GetUserData,
    GetUserError,
    GetUserResponse,
    UpdateUserData,
    UpdateUserError,
    UpdateUserResponse,
    RegisterUserData,
    RegisterUserError,
    RegisterUserResponse,
    GetRegistrationsData,
    GetRegistrationsError,
    GetRegistrationsResponse,
    VerifyUserRegistrationData,
    VerifyUserRegistrationError,
    VerifyUserRegistrationResponse,
    InviteUserData,
    InviteUserError,
    InviteUserResponse,
    GetInvitationsData,
    GetInvitationsError,
    GetInvitationsResponse,
    AcceptUserInvitationData,
    AcceptUserInvitationError,
    AcceptUserInvitationResponse,
    InitPasswordResetData,
    InitPasswordResetError,
    InitPasswordResetResponse,
    ResetPasswordData,
    ResetPasswordError,
    ResetPasswordResponse,
    AddRoleData,
    AddRoleError,
    AddRoleResponse,
    GetRolesData,
    GetRolesError,
    GetRolesResponse,
    UpdateRoleData,
    UpdateRoleError,
    UpdateRoleResponse,
    DeleteRoleData,
    DeleteRoleError,
    DeleteRoleResponse,
    AddEventData,
    AddEventError,
    AddEventResponse,
    GetEventsData,
    GetEventsError,
    GetEventsResponse,
    GetPublicEventsData,
    GetPublicEventsError,
    GetPublicEventsResponse,
    GetEventRegistrationsData,
    GetEventRegistrationsError,
    GetEventRegistrationsResponse,
    GetEventData,
    GetEventError,
    GetEventResponse,
    UpdateEventData,
    UpdateEventError,
    UpdateEventResponse,
    DeleteEventData,
    DeleteEventError,
    DeleteEventResponse,
    GetEventInvoicesData,
    GetEventInvoicesError,
    GetEventInvoicesResponse,
    AddEventDayData,
    AddEventDayError,
    AddEventDayResponse,
    GetEventDaysData,
    GetEventDaysError,
    GetEventDaysResponse,
    GetEventDayData,
    GetEventDayError,
    GetEventDayResponse,
    UpdateEventDayData,
    UpdateEventDayError,
    UpdateEventDayResponse,
    DeleteEventDayData,
    DeleteEventDayError,
    DeleteEventDayResponse,
    AssignCompetitionsToEventDayData,
    AssignCompetitionsToEventDayError,
    AssignCompetitionsToEventDayResponse,
    AddCompetitionData,
    AddCompetitionError,
    AddCompetitionResponse,
    GetCompetitionsData,
    GetCompetitionsError,
    GetCompetitionsResponse,
    GetCompetitionData,
    GetCompetitionError,
    GetCompetitionResponse,
    UpdateCompetitionData,
    UpdateCompetitionError,
    UpdateCompetitionResponse,
    DeleteCompetitionData,
    DeleteCompetitionError,
    DeleteCompetitionResponse,
    AssignDaysToCompetitionData,
    AssignDaysToCompetitionError,
    AssignDaysToCompetitionResponse,
    GetCompetitionRegistrationsData,
    GetCompetitionRegistrationsError,
    GetCompetitionRegistrationsResponse,
    AddCompetitionRegistrationData,
    AddCompetitionRegistrationError,
    AddCompetitionRegistrationResponse,
    UpdateCompetitionRegistrationData,
    UpdateCompetitionRegistrationError,
    UpdateCompetitionRegistrationResponse,
    DeleteCompetitionRegistrationData,
    DeleteCompetitionRegistrationError,
    DeleteCompetitionRegistrationResponse,
    UpdateCompetitionSetupData,
    UpdateCompetitionSetupError,
    UpdateCompetitionSetupResponse,
    GetCompetitionSetupData,
    GetCompetitionSetupError,
    GetCompetitionSetupResponse,
    GetCompetitionExecutionProgressData,
    GetCompetitionExecutionProgressError,
    GetCompetitionExecutionProgressResponse,
    DeleteCurrentCompetitionExecutionRoundData,
    DeleteCurrentCompetitionExecutionRoundError,
    DeleteCurrentCompetitionExecutionRoundResponse,
    CreateNextCompetitionRoundData,
    CreateNextCompetitionRoundError,
    CreateNextCompetitionRoundResponse,
    UpdateMatchDataData,
    UpdateMatchDataError,
    UpdateMatchDataResponse,
    UpdateMatchResultsData,
    UpdateMatchResultsError,
    UpdateMatchResultsResponse,
    DownloadStartListData,
    DownloadStartListError,
    DownloadStartListResponse,
    GetCompetitionPlacesData,
    GetCompetitionPlacesError,
    GetCompetitionPlacesResponse,
    AddSubstitutionData,
    AddSubstitutionError,
    AddSubstitutionResponse,
    DeleteSubstitutionData,
    DeleteSubstitutionError,
    DeleteSubstitutionResponse,
    GetPossibleSubOutsData,
    GetPossibleSubOutsError,
    GetPossibleSubOutsResponse,
    GetPossibleSubInsData,
    GetPossibleSubInsError,
    GetPossibleSubInsResponse,
    AddDocumentsData,
    AddDocumentsError,
    AddDocumentsResponse,
    GetDocumentsData,
    GetDocumentsError,
    GetDocumentsResponse,
    DownloadDocumentData,
    DownloadDocumentError,
    DownloadDocumentResponse,
    UpdateDocumentData,
    UpdateDocumentError,
    UpdateDocumentResponse,
    DeleteDocumentData,
    DeleteDocumentError,
    DeleteDocumentResponse,
    AddCompetitionTemplateData,
    AddCompetitionTemplateError,
    AddCompetitionTemplateResponse,
    GetCompetitionTemplatesData,
    GetCompetitionTemplatesError,
    GetCompetitionTemplatesResponse,
    GetCompetitionTemplateData,
    GetCompetitionTemplateError,
    GetCompetitionTemplateResponse,
    UpdateCompetitionTemplateData,
    UpdateCompetitionTemplateError,
    UpdateCompetitionTemplateResponse,
    DeleteCompetitionTemplateData,
    DeleteCompetitionTemplateError,
    DeleteCompetitionTemplateResponse,
    AddCompetitionCategoryData,
    AddCompetitionCategoryError,
    AddCompetitionCategoryResponse,
    GetCompetitionCategoriesError,
    GetCompetitionCategoriesResponse,
    UpdateCompetitionCategoryData,
    UpdateCompetitionCategoryError,
    UpdateCompetitionCategoryResponse,
    DeleteCompetitionCategoryData,
    DeleteCompetitionCategoryError,
    DeleteCompetitionCategoryResponse,
    AddNamedParticipantData,
    AddNamedParticipantError,
    AddNamedParticipantResponse,
    GetNamedParticipantsError,
    GetNamedParticipantsResponse,
    UpdateNamedParticipantData,
    UpdateNamedParticipantError,
    UpdateNamedParticipantResponse,
    DeleteNamedParticipantData,
    DeleteNamedParticipantError,
    DeleteNamedParticipantResponse,
    NewCaptchaError,
    NewCaptchaResponse,
    AddClubData,
    AddClubError,
    AddClubResponse,
    GetClubsData,
    GetClubsError,
    GetClubsResponse,
    GetClubData,
    GetClubError,
    GetClubResponse,
    UpdateClubData,
    UpdateClubError,
    UpdateClubResponse,
    DeleteClubData,
    DeleteClubError,
    DeleteClubResponse,
    GetClubUsersData,
    GetClubUsersError,
    GetClubUsersResponse,
    GetClubParticipantsData,
    GetClubParticipantsError,
    GetClubParticipantsResponse,
    AddClubParticipantData,
    AddClubParticipantError,
    AddClubParticipantResponse,
    GetClubParticipantData,
    GetClubParticipantError,
    GetClubParticipantResponse,
    UpdateClubParticipantData,
    UpdateClubParticipantError,
    UpdateClubParticipantResponse,
    DeleteClubParticipantData,
    DeleteClubParticipantError,
    DeleteClubParticipantResponse,
    GetClubNamesData,
    GetClubNamesError,
    GetClubNamesResponse,
    GetRegistrationsForEventData,
    GetRegistrationsForEventError,
    GetRegistrationsForEventResponse,
    GetEventRegistrationData,
    GetEventRegistrationError,
    GetEventRegistrationResponse,
    DeleteEventRegistrationData,
    DeleteEventRegistrationError,
    DeleteEventRegistrationResponse,
    GetRegistrationInvoicesData,
    GetRegistrationInvoicesError,
    GetRegistrationInvoicesResponse,
    GetEventRegistrationTemplateData,
    GetEventRegistrationTemplateError,
    GetEventRegistrationTemplateResponse,
    AddEventRegistrationData,
    AddEventRegistrationError,
    AddEventRegistrationResponse,
    GetRegistrationResultData,
    GetRegistrationResultError,
    GetRegistrationResultResponse,
    FinalizeRegistrationsData,
    FinalizeRegistrationsError,
    FinalizeRegistrationsResponse,
    GetRegistrationsWithoutTeamNumberData,
    GetRegistrationsWithoutTeamNumberError,
    GetRegistrationsWithoutTeamNumberResponse,
    AddFeeData,
    AddFeeError,
    AddFeeResponse,
    GetFeesData,
    GetFeesError,
    GetFeesResponse,
    UpdateFeeData,
    UpdateFeeError,
    UpdateFeeResponse,
    DeleteFeeData,
    DeleteFeeError,
    DeleteFeeResponse,
    AddDocumentTypeData,
    AddDocumentTypeError,
    AddDocumentTypeResponse,
    GetDocumentTypesData,
    GetDocumentTypesError,
    GetDocumentTypesResponse,
    UpdateDocumentTypeData,
    UpdateDocumentTypeError,
    UpdateDocumentTypeResponse,
    DeleteDocumentTypeData,
    DeleteDocumentTypeError,
    DeleteDocumentTypeResponse,
    GetParticipantRequirementsForEventData,
    GetParticipantRequirementsForEventError,
    GetParticipantRequirementsForEventResponse,
    CheckParticipantRequirementsForEventData,
    CheckParticipantRequirementsForEventError,
    CheckParticipantRequirementsForEventResponse,
    ApproveParticipantRequirementsForEventData,
    ApproveParticipantRequirementsForEventError,
    ApproveParticipantRequirementsForEventResponse,
    GetActiveParticipantRequirementsForEventData,
    GetActiveParticipantRequirementsForEventError,
    GetActiveParticipantRequirementsForEventResponse,
    ActivateParticipantRequirementForEventData,
    ActivateParticipantRequirementForEventError,
    ActivateParticipantRequirementForEventResponse,
    RemoveParticipantRequirementForEventData,
    RemoveParticipantRequirementForEventError,
    RemoveParticipantRequirementForEventResponse,
    GetParticipantsForEventData,
    GetParticipantsForEventError,
    GetParticipantsForEventResponse,
    UpdateParticipantRequirementData,
    UpdateParticipantRequirementError,
    UpdateParticipantRequirementResponse,
    DeleteParticipantRequirementData,
    DeleteParticipantRequirementError,
    DeleteParticipantRequirementResponse,
    AddParticipantRequirementData,
    AddParticipantRequirementError,
    AddParticipantRequirementResponse,
    GetParticipantRequirementsError,
    GetParticipantRequirementsResponse,
    AddCompetitionSetupTemplateData,
    AddCompetitionSetupTemplateError,
    AddCompetitionSetupTemplateResponse,
    GetCompetitionSetupTemplatesData,
    GetCompetitionSetupTemplatesError,
    GetCompetitionSetupTemplatesResponse,
    GetCompetitionSetupTemplateData,
    GetCompetitionSetupTemplateError,
    GetCompetitionSetupTemplateResponse,
    UpdateCompetitionSetupTemplateData,
    UpdateCompetitionSetupTemplateError,
    UpdateCompetitionSetupTemplateResponse,
    DeleteCompetitionSetupTemplateData,
    DeleteCompetitionSetupTemplateError,
    DeleteCompetitionSetupTemplateResponse,
    GetCompetitionSetupTemplateOverviewError,
    GetCompetitionSetupTemplateOverviewResponse,
    GetDocumentTemplatesData,
    GetDocumentTemplatesError,
    GetDocumentTemplatesResponse,
    AddDocumentTemplateData,
    AddDocumentTemplateError,
    AddDocumentTemplateResponse,
    UpdateDocumentTemplateData,
    UpdateDocumentTemplateError,
    UpdateDocumentTemplateResponse,
    DeleteDocumentTemplateData,
    DeleteDocumentTemplateError,
    DeleteDocumentTemplateResponse,
    DownloadDocumentTemplateSampleData,
    DownloadDocumentTemplateSampleError,
    DownloadDocumentTemplateSampleResponse,
    GetDocumentTemplateTypesError,
    GetDocumentTemplateTypesResponse,
    AssignDocumentTemplateData,
    AssignDocumentTemplateError,
    AssignDocumentTemplateResponse,
    AddTaskData,
    AddTaskError,
    AddTaskResponse,
    GetTasksData,
    GetTasksError,
    GetTasksResponse,
    UpdateTaskData,
    UpdateTaskError,
    UpdateTaskResponse,
    DeleteTaskData,
    DeleteTaskError,
    DeleteTaskResponse,
    GetOpenTasksForUserData,
    GetOpenTasksForUserError,
    GetOpenTasksForUserResponse,
    GetBankAccountsData,
    GetBankAccountsError,
    GetBankAccountsResponse,
    AddBankAccountData,
    AddBankAccountError,
    AddBankAccountResponse,
    UpdateBankAccountData,
    UpdateBankAccountError,
    UpdateBankAccountResponse,
    DeleteBankAccountData,
    DeleteBankAccountError,
    DeleteBankAccountResponse,
    GetAssignedBankAccountData,
    GetAssignedBankAccountError,
    GetAssignedBankAccountResponse,
    AssignBankAccountData,
    AssignBankAccountError,
    AssignBankAccountResponse,
    ProduceInvoicesForEventRegistrationsData,
    ProduceInvoicesForEventRegistrationsError,
    ProduceInvoicesForEventRegistrationsResponse,
    GetContactsData,
    GetContactsError,
    GetContactsResponse,
    AddContactData,
    AddContactError,
    AddContactResponse,
    UpdateContactData,
    UpdateContactError,
    UpdateContactResponse,
    DeleteContactData,
    DeleteContactError,
    DeleteContactResponse,
    GetAssignedContactData,
    GetAssignedContactError,
    GetAssignedContactResponse,
    AssignContactData,
    AssignContactError,
    AssignContactResponse,
    AddWorkTypeData,
    AddWorkTypeError,
    AddWorkTypeResponse,
    GetWorkTypesError,
    GetWorkTypesResponse,
    UpdateWorkTypeData,
    UpdateWorkTypeError,
    UpdateWorkTypeResponse,
    DeleteWorkTypeData,
    DeleteWorkTypeError,
    DeleteWorkTypeResponse,
    AddWorkShiftData,
    AddWorkShiftError,
    AddWorkShiftResponse,
    GetWorkShiftsData,
    GetWorkShiftsError,
    GetWorkShiftsResponse,
    UpdateWorkShiftData,
    UpdateWorkShiftError,
    UpdateWorkShiftResponse,
    DeleteWorkShiftData,
    DeleteWorkShiftError,
    DeleteWorkShiftResponse,
    GetWorkShiftsForUserData,
    GetWorkShiftsForUserError,
    GetWorkShiftsForUserResponse,
    GetInvoicesError,
    GetInvoicesResponse,
    DownloadInvoiceError,
    DownloadInvoiceResponse,
    SetInvoicePaidData,
    SetInvoicePaidError,
    SetInvoicePaidResponse,
} from './types.gen'

export const client = createClient(createConfig())

export const userLogin = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UserLoginData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<UserLoginResponse, UserLoginError, ThrowOnError>({
        ...options,
        url: '/login',
    })
}

export const checkUserLogin = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        CheckUserLoginResponse,
        CheckUserLoginError,
        ThrowOnError
    >({
        ...options,
        url: '/login',
    })
}

export const userLogout = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<UserLogoutResponse, UserLogoutError, ThrowOnError>({
        ...options,
        url: '/login',
    })
}

export const getPrivileges = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetPrivilegesResponse, GetPrivilegesError, ThrowOnError>(
        {
            ...options,
            url: '/privileges',
        },
    )
}

export const getUsers = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<GetUsersData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetUsersResponse, GetUsersError, ThrowOnError>({
        ...options,
        url: '/user',
    })
}

export const getUser = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetUserData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetUserResponse, GetUserError, ThrowOnError>({
        ...options,
        url: '/user/{userId}',
    })
}

export const updateUser = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateUserData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<UpdateUserResponse, UpdateUserError, ThrowOnError>({
        ...options,
        url: '/user/{userId}',
    })
}

export const registerUser = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<RegisterUserData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<RegisterUserResponse, RegisterUserError, ThrowOnError>({
        ...options,
        url: '/user/registration',
    })
}

export const getRegistrations = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<GetRegistrationsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetRegistrationsResponse,
        GetRegistrationsError,
        ThrowOnError
    >({
        ...options,
        url: '/user/registration',
    })
}

export const verifyUserRegistration = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<VerifyUserRegistrationData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        VerifyUserRegistrationResponse,
        VerifyUserRegistrationError,
        ThrowOnError
    >({
        ...options,
        url: '/user/registration/verify',
    })
}

export const inviteUser = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<InviteUserData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<InviteUserResponse, InviteUserError, ThrowOnError>({
        ...options,
        url: '/user/invitation',
    })
}

export const getInvitations = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<GetInvitationsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetInvitationsResponse,
        GetInvitationsError,
        ThrowOnError
    >({
        ...options,
        url: '/user/invitation',
    })
}

export const acceptUserInvitation = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AcceptUserInvitationData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        AcceptUserInvitationResponse,
        AcceptUserInvitationError,
        ThrowOnError
    >({
        ...options,
        url: '/user/invitation/accept',
    })
}

export const initPasswordReset = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<InitPasswordResetData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        InitPasswordResetResponse,
        InitPasswordResetError,
        ThrowOnError
    >({
        ...options,
        url: '/user/resetPassword',
    })
}

export const resetPassword = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<ResetPasswordData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<ResetPasswordResponse, ResetPasswordError, ThrowOnError>(
        {
            ...options,
            url: '/user/resetPassword/{passwordResetToken}',
        },
    )
}

export const addRole = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddRoleData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<AddRoleResponse, AddRoleError, ThrowOnError>({
        ...options,
        url: '/role',
    })
}

export const getRoles = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<GetRolesData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetRolesResponse, GetRolesError, ThrowOnError>({
        ...options,
        url: '/role',
    })
}

export const updateRole = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateRoleData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<UpdateRoleResponse, UpdateRoleError, ThrowOnError>({
        ...options,
        url: '/role/{roleId}',
    })
}

export const deleteRole = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteRoleData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<DeleteRoleResponse, DeleteRoleError, ThrowOnError>({
        ...options,
        url: '/role/{roleId}',
    })
}

export const addEvent = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddEventData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<AddEventResponse, AddEventError, ThrowOnError>({
        ...options,
        url: '/event',
    })
}

export const getEvents = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<GetEventsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetEventsResponse, GetEventsError, ThrowOnError>({
        ...options,
        url: '/event',
    })
}

export const getPublicEvents = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<GetPublicEventsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetPublicEventsResponse,
        GetPublicEventsError,
        ThrowOnError
    >({
        ...options,
        url: '/event/public',
    })
}

export const getEventRegistrations = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<GetEventRegistrationsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetEventRegistrationsResponse,
        GetEventRegistrationsError,
        ThrowOnError
    >({
        ...options,
        url: '/event/registration',
    })
}

export const getEvent = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetEventData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetEventResponse, GetEventError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}',
    })
}

export const updateEvent = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateEventData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<UpdateEventResponse, UpdateEventError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}',
    })
}

export const deleteEvent = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteEventData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<DeleteEventResponse, DeleteEventError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}',
    })
}

export const getEventInvoices = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetEventInvoicesData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetEventInvoicesResponse,
        GetEventInvoicesError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/invoices',
    })
}

export const addEventDay = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddEventDayData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<AddEventDayResponse, AddEventDayError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}/eventDay',
    })
}

export const getEventDays = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetEventDaysData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetEventDaysResponse, GetEventDaysError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}/eventDay',
    })
}

export const getEventDay = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetEventDayData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetEventDayResponse, GetEventDayError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}/eventDay/{eventDayId}',
    })
}

export const updateEventDay = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateEventDayData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UpdateEventDayResponse,
        UpdateEventDayError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/eventDay/{eventDayId}',
    })
}

export const deleteEventDay = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteEventDayData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteEventDayResponse,
        DeleteEventDayError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/eventDay/{eventDayId}',
    })
}

export const assignCompetitionsToEventDay = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AssignCompetitionsToEventDayData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        AssignCompetitionsToEventDayResponse,
        AssignCompetitionsToEventDayError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/eventDay/{eventDayId}/competitions',
    })
}

export const addCompetition = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddCompetitionData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        AddCompetitionResponse,
        AddCompetitionError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition',
    })
}

export const getCompetitions = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetCompetitionsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetCompetitionsResponse,
        GetCompetitionsError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition',
    })
}

export const getCompetition = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetCompetitionData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetCompetitionResponse,
        GetCompetitionError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition/{competitionId}',
    })
}

export const updateCompetition = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateCompetitionData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UpdateCompetitionResponse,
        UpdateCompetitionError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition/{competitionId}',
    })
}

export const deleteCompetition = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteCompetitionData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteCompetitionResponse,
        DeleteCompetitionError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition/{competitionId}',
    })
}

export const assignDaysToCompetition = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AssignDaysToCompetitionData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        AssignDaysToCompetitionResponse,
        AssignDaysToCompetitionError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition/{competitionId}/days',
    })
}

export const getCompetitionRegistrations = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetCompetitionRegistrationsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetCompetitionRegistrationsResponse,
        GetCompetitionRegistrationsError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition/{competitionId}/competitionRegistration',
    })
}

export const addCompetitionRegistration = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddCompetitionRegistrationData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        AddCompetitionRegistrationResponse,
        AddCompetitionRegistrationError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition/{competitionId}/competitionRegistration',
    })
}

export const updateCompetitionRegistration = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateCompetitionRegistrationData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UpdateCompetitionRegistrationResponse,
        UpdateCompetitionRegistrationError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition/{competitionId}/competitionRegistration/{competitionRegistrationId}',
    })
}

export const deleteCompetitionRegistration = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteCompetitionRegistrationData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteCompetitionRegistrationResponse,
        DeleteCompetitionRegistrationError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition/{competitionId}/competitionRegistration/{competitionRegistrationId}',
    })
}

export const updateCompetitionSetup = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateCompetitionSetupData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UpdateCompetitionSetupResponse,
        UpdateCompetitionSetupError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition/{competitionId}/competitionSetup',
    })
}

export const getCompetitionSetup = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetCompetitionSetupData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetCompetitionSetupResponse,
        GetCompetitionSetupError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition/{competitionId}/competitionSetup',
    })
}

export const getCompetitionExecutionProgress = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetCompetitionExecutionProgressData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetCompetitionExecutionProgressResponse,
        GetCompetitionExecutionProgressError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition/{competitionId}/competitionExecution',
    })
}

export const deleteCurrentCompetitionExecutionRound = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteCurrentCompetitionExecutionRoundData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteCurrentCompetitionExecutionRoundResponse,
        DeleteCurrentCompetitionExecutionRoundError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition/{competitionId}/competitionExecution',
    })
}

export const createNextCompetitionRound = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<CreateNextCompetitionRoundData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        CreateNextCompetitionRoundResponse,
        CreateNextCompetitionRoundError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition/{competitionId}/competitionExecution/createNextRound',
    })
}

export const updateMatchData = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateMatchDataData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UpdateMatchDataResponse,
        UpdateMatchDataError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition/{competitionId}/competitionExecution/{competitionMatchId}/data',
    })
}

export const updateMatchResults = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateMatchResultsData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UpdateMatchResultsResponse,
        UpdateMatchResultsError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition/{competitionId}/competitionExecution/{competitionMatchId}/results',
    })
}

export const downloadStartList = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DownloadStartListData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        DownloadStartListResponse,
        DownloadStartListError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition/{competitionId}/competitionExecution/{competitionMatchId}/startList',
    })
}

export const getCompetitionPlaces = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetCompetitionPlacesData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetCompetitionPlacesResponse,
        GetCompetitionPlacesError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition/{competitionId}/competitionExecution/places',
    })
}

export const addSubstitution = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddSubstitutionData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        AddSubstitutionResponse,
        AddSubstitutionError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition/{competitionId}/competitionExecution/substitution',
    })
}

export const deleteSubstitution = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteSubstitutionData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteSubstitutionResponse,
        DeleteSubstitutionError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition/{competitionId}/competitionExecution/substitution/{substitutionId}',
    })
}

export const getPossibleSubOuts = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetPossibleSubOutsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetPossibleSubOutsResponse,
        GetPossibleSubOutsError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition/{competitionId}/competitionExecution/substitution/possibleSubOuts',
    })
}

export const getPossibleSubIns = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetPossibleSubInsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetPossibleSubInsResponse,
        GetPossibleSubInsError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/competition/{competitionId}/competitionExecution/substitution/possibleSubIns/{participantId}',
    })
}

export const addDocuments = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddDocumentsData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<AddDocumentsResponse, AddDocumentsError, ThrowOnError>({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers,
        },
        url: '/event/{eventId}/eventDocument',
    })
}

export const getDocuments = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetDocumentsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetDocumentsResponse, GetDocumentsError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}/eventDocument',
    })
}

export const downloadDocument = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DownloadDocumentData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        DownloadDocumentResponse,
        DownloadDocumentError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/eventDocument/{eventDocumentId}',
    })
}

export const updateDocument = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateDocumentData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UpdateDocumentResponse,
        UpdateDocumentError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/eventDocument/{eventDocumentId}',
    })
}

export const deleteDocument = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteDocumentData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteDocumentResponse,
        DeleteDocumentError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/eventDocument/{eventDocumentId}',
    })
}

export const addCompetitionTemplate = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddCompetitionTemplateData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        AddCompetitionTemplateResponse,
        AddCompetitionTemplateError,
        ThrowOnError
    >({
        ...options,
        url: '/competitionTemplate',
    })
}

export const getCompetitionTemplates = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<GetCompetitionTemplatesData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetCompetitionTemplatesResponse,
        GetCompetitionTemplatesError,
        ThrowOnError
    >({
        ...options,
        url: '/competitionTemplate',
    })
}

export const getCompetitionTemplate = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetCompetitionTemplateData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetCompetitionTemplateResponse,
        GetCompetitionTemplateError,
        ThrowOnError
    >({
        ...options,
        url: '/competitionTemplate/{competitionTemplateId}',
    })
}

export const updateCompetitionTemplate = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateCompetitionTemplateData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UpdateCompetitionTemplateResponse,
        UpdateCompetitionTemplateError,
        ThrowOnError
    >({
        ...options,
        url: '/competitionTemplate/{competitionTemplateId}',
    })
}

export const deleteCompetitionTemplate = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteCompetitionTemplateData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteCompetitionTemplateResponse,
        DeleteCompetitionTemplateError,
        ThrowOnError
    >({
        ...options,
        url: '/competitionTemplate/{competitionTemplateId}',
    })
}

export const addCompetitionCategory = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddCompetitionCategoryData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        AddCompetitionCategoryResponse,
        AddCompetitionCategoryError,
        ThrowOnError
    >({
        ...options,
        url: '/competitionCategory',
    })
}

export const getCompetitionCategories = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetCompetitionCategoriesResponse,
        GetCompetitionCategoriesError,
        ThrowOnError
    >({
        ...options,
        url: '/competitionCategory',
    })
}

export const updateCompetitionCategory = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateCompetitionCategoryData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UpdateCompetitionCategoryResponse,
        UpdateCompetitionCategoryError,
        ThrowOnError
    >({
        ...options,
        url: '/competitionCategory/{competitionCategoryId}',
    })
}

export const deleteCompetitionCategory = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteCompetitionCategoryData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteCompetitionCategoryResponse,
        DeleteCompetitionCategoryError,
        ThrowOnError
    >({
        ...options,
        url: '/competitionCategory/{competitionCategoryId}',
    })
}

export const addNamedParticipant = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddNamedParticipantData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        AddNamedParticipantResponse,
        AddNamedParticipantError,
        ThrowOnError
    >({
        ...options,
        url: '/namedParticipant',
    })
}

export const getNamedParticipants = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetNamedParticipantsResponse,
        GetNamedParticipantsError,
        ThrowOnError
    >({
        ...options,
        url: '/namedParticipant',
    })
}

export const updateNamedParticipant = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateNamedParticipantData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UpdateNamedParticipantResponse,
        UpdateNamedParticipantError,
        ThrowOnError
    >({
        ...options,
        url: '/namedParticipant/{namedParticipantId}',
    })
}

export const deleteNamedParticipant = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteNamedParticipantData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteNamedParticipantResponse,
        DeleteNamedParticipantError,
        ThrowOnError
    >({
        ...options,
        url: '/namedParticipant/{namedParticipantId}',
    })
}

export const newCaptcha = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).post<NewCaptchaResponse, NewCaptchaError, ThrowOnError>({
        ...options,
        url: '/captcha',
    })
}

export const addClub = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddClubData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<AddClubResponse, AddClubError, ThrowOnError>({
        ...options,
        url: '/club',
    })
}

export const getClubs = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<GetClubsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetClubsResponse, GetClubsError, ThrowOnError>({
        ...options,
        url: '/club',
    })
}

export const getClub = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetClubData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetClubResponse, GetClubError, ThrowOnError>({
        ...options,
        url: '/club/{clubId}',
    })
}

export const updateClub = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateClubData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<UpdateClubResponse, UpdateClubError, ThrowOnError>({
        ...options,
        url: '/club/{clubId}',
    })
}

export const deleteClub = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteClubData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<DeleteClubResponse, DeleteClubError, ThrowOnError>({
        ...options,
        url: '/club/{clubId}',
    })
}

export const getClubUsers = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetClubUsersData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetClubUsersResponse, GetClubUsersError, ThrowOnError>({
        ...options,
        url: '/club/{clubId}/user',
    })
}

export const getClubParticipants = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetClubParticipantsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetClubParticipantsResponse,
        GetClubParticipantsError,
        ThrowOnError
    >({
        ...options,
        url: '/club/{clubId}/participant',
    })
}

export const addClubParticipant = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddClubParticipantData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        AddClubParticipantResponse,
        AddClubParticipantError,
        ThrowOnError
    >({
        ...options,
        url: '/club/{clubId}/participant',
    })
}

export const getClubParticipant = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetClubParticipantData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetClubParticipantResponse,
        GetClubParticipantError,
        ThrowOnError
    >({
        ...options,
        url: '/club/{clubId}/participant/{participantId}',
    })
}

export const updateClubParticipant = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateClubParticipantData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UpdateClubParticipantResponse,
        UpdateClubParticipantError,
        ThrowOnError
    >({
        ...options,
        url: '/club/{clubId}/participant/{participantId}',
    })
}

export const deleteClubParticipant = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteClubParticipantData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteClubParticipantResponse,
        DeleteClubParticipantError,
        ThrowOnError
    >({
        ...options,
        url: '/club/{clubId}/participant/{participantId}',
    })
}

export const getClubNames = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<GetClubNamesData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetClubNamesResponse, GetClubNamesError, ThrowOnError>({
        ...options,
        url: '/club/search',
    })
}

export const getRegistrationsForEvent = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetRegistrationsForEventData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetRegistrationsForEventResponse,
        GetRegistrationsForEventError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/eventRegistration',
    })
}

export const getEventRegistration = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetEventRegistrationData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetEventRegistrationResponse,
        GetEventRegistrationError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/eventRegistration/{eventRegistrationId}',
    })
}

export const deleteEventRegistration = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteEventRegistrationData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteEventRegistrationResponse,
        DeleteEventRegistrationError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/eventRegistration/{eventRegistrationId}',
    })
}

export const getRegistrationInvoices = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetRegistrationInvoicesData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetRegistrationInvoicesResponse,
        GetRegistrationInvoicesError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/eventRegistration/{eventRegistrationId}/invoices',
    })
}

export const getEventRegistrationTemplate = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetEventRegistrationTemplateData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetEventRegistrationTemplateResponse,
        GetEventRegistrationTemplateError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/registrationTemplate',
    })
}

export const addEventRegistration = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddEventRegistrationData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        AddEventRegistrationResponse,
        AddEventRegistrationError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/register',
    })
}

export const getRegistrationResult = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetRegistrationResultData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetRegistrationResultResponse,
        GetRegistrationResultError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/registrationResult',
    })
}

export const finalizeRegistrations = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<FinalizeRegistrationsData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        FinalizeRegistrationsResponse,
        FinalizeRegistrationsError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/finalizeRegistrations',
    })
}

export const getRegistrationsWithoutTeamNumber = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetRegistrationsWithoutTeamNumberData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetRegistrationsWithoutTeamNumberResponse,
        GetRegistrationsWithoutTeamNumberError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/missingTeamNumbers',
    })
}

export const addFee = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddFeeData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<AddFeeResponse, AddFeeError, ThrowOnError>({
        ...options,
        url: '/fee',
    })
}

export const getFees = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<GetFeesData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetFeesResponse, GetFeesError, ThrowOnError>({
        ...options,
        url: '/fee',
    })
}

export const updateFee = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateFeeData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<UpdateFeeResponse, UpdateFeeError, ThrowOnError>({
        ...options,
        url: '/fee/{feeId}',
    })
}

export const deleteFee = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteFeeData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<DeleteFeeResponse, DeleteFeeError, ThrowOnError>({
        ...options,
        url: '/fee/{feeId}',
    })
}

export const addDocumentType = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddDocumentTypeData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        AddDocumentTypeResponse,
        AddDocumentTypeError,
        ThrowOnError
    >({
        ...options,
        url: '/eventDocumentType',
    })
}

export const getDocumentTypes = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<GetDocumentTypesData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetDocumentTypesResponse,
        GetDocumentTypesError,
        ThrowOnError
    >({
        ...options,
        url: '/eventDocumentType',
    })
}

export const updateDocumentType = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateDocumentTypeData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UpdateDocumentTypeResponse,
        UpdateDocumentTypeError,
        ThrowOnError
    >({
        ...options,
        url: '/eventDocumentType/{eventDocumentTypeId}',
    })
}

export const deleteDocumentType = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteDocumentTypeData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteDocumentTypeResponse,
        DeleteDocumentTypeError,
        ThrowOnError
    >({
        ...options,
        url: '/eventDocumentType/{eventDocumentTypeId}',
    })
}

export const getParticipantRequirementsForEvent = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetParticipantRequirementsForEventData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetParticipantRequirementsForEventResponse,
        GetParticipantRequirementsForEventError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/participantRequirement',
    })
}

export const checkParticipantRequirementsForEvent = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<CheckParticipantRequirementsForEventData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        CheckParticipantRequirementsForEventResponse,
        CheckParticipantRequirementsForEventError,
        ThrowOnError
    >({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers,
        },
        url: '/event/{eventId}/participantRequirement',
    })
}

export const approveParticipantRequirementsForEvent = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<ApproveParticipantRequirementsForEventData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        ApproveParticipantRequirementsForEventResponse,
        ApproveParticipantRequirementsForEventError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/participantRequirement/approve',
    })
}

export const getActiveParticipantRequirementsForEvent = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetActiveParticipantRequirementsForEventData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetActiveParticipantRequirementsForEventResponse,
        GetActiveParticipantRequirementsForEventError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/participantRequirement/active',
    })
}

export const activateParticipantRequirementForEvent = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<ActivateParticipantRequirementForEventData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        ActivateParticipantRequirementForEventResponse,
        ActivateParticipantRequirementForEventError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/participantRequirement/{participantRequirementId}',
    })
}

export const removeParticipantRequirementForEvent = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<RemoveParticipantRequirementForEventData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        RemoveParticipantRequirementForEventResponse,
        RemoveParticipantRequirementForEventError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/participantRequirement/{participantRequirementId}',
    })
}

export const getParticipantsForEvent = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetParticipantsForEventData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetParticipantsForEventResponse,
        GetParticipantsForEventError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/participant',
    })
}

export const updateParticipantRequirement = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateParticipantRequirementData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UpdateParticipantRequirementResponse,
        UpdateParticipantRequirementError,
        ThrowOnError
    >({
        ...options,
        url: '/participantRequirement/{participantRequirementId}',
    })
}

export const deleteParticipantRequirement = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteParticipantRequirementData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteParticipantRequirementResponse,
        DeleteParticipantRequirementError,
        ThrowOnError
    >({
        ...options,
        url: '/participantRequirement/{participantRequirementId}',
    })
}

export const addParticipantRequirement = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddParticipantRequirementData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        AddParticipantRequirementResponse,
        AddParticipantRequirementError,
        ThrowOnError
    >({
        ...options,
        url: '/participantRequirement',
    })
}

export const getParticipantRequirements = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetParticipantRequirementsResponse,
        GetParticipantRequirementsError,
        ThrowOnError
    >({
        ...options,
        url: '/participantRequirement',
    })
}

export const addCompetitionSetupTemplate = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddCompetitionSetupTemplateData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        AddCompetitionSetupTemplateResponse,
        AddCompetitionSetupTemplateError,
        ThrowOnError
    >({
        ...options,
        url: '/competitionSetupTemplate',
    })
}

export const getCompetitionSetupTemplates = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<GetCompetitionSetupTemplatesData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetCompetitionSetupTemplatesResponse,
        GetCompetitionSetupTemplatesError,
        ThrowOnError
    >({
        ...options,
        url: '/competitionSetupTemplate',
    })
}

export const getCompetitionSetupTemplate = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetCompetitionSetupTemplateData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetCompetitionSetupTemplateResponse,
        GetCompetitionSetupTemplateError,
        ThrowOnError
    >({
        ...options,
        url: '/competitionSetupTemplate/{competitionSetupTemplateId}',
    })
}

export const updateCompetitionSetupTemplate = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateCompetitionSetupTemplateData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UpdateCompetitionSetupTemplateResponse,
        UpdateCompetitionSetupTemplateError,
        ThrowOnError
    >({
        ...options,
        url: '/competitionSetupTemplate/{competitionSetupTemplateId}',
    })
}

export const deleteCompetitionSetupTemplate = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteCompetitionSetupTemplateData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteCompetitionSetupTemplateResponse,
        DeleteCompetitionSetupTemplateError,
        ThrowOnError
    >({
        ...options,
        url: '/competitionSetupTemplate/{competitionSetupTemplateId}',
    })
}

export const getCompetitionSetupTemplateOverview = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetCompetitionSetupTemplateOverviewResponse,
        GetCompetitionSetupTemplateOverviewError,
        ThrowOnError
    >({
        ...options,
        url: '/competitionSetupTemplate/overview',
    })
}

export const getDocumentTemplates = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<GetDocumentTemplatesData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetDocumentTemplatesResponse,
        GetDocumentTemplatesError,
        ThrowOnError
    >({
        ...options,
        url: '/documentTemplate',
    })
}

export const addDocumentTemplate = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddDocumentTemplateData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        AddDocumentTemplateResponse,
        AddDocumentTemplateError,
        ThrowOnError
    >({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers,
        },
        url: '/documentTemplate',
    })
}

export const updateDocumentTemplate = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateDocumentTemplateData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UpdateDocumentTemplateResponse,
        UpdateDocumentTemplateError,
        ThrowOnError
    >({
        ...options,
        url: '/documentTemplate/{documentTemplateId}',
    })
}

export const deleteDocumentTemplate = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteDocumentTemplateData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteDocumentTemplateResponse,
        DeleteDocumentTemplateError,
        ThrowOnError
    >({
        ...options,
        url: '/documentTemplate/{documentTemplateId}',
    })
}

export const downloadDocumentTemplateSample = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DownloadDocumentTemplateSampleData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        DownloadDocumentTemplateSampleResponse,
        DownloadDocumentTemplateSampleError,
        ThrowOnError
    >({
        ...options,
        url: '/documentTemplate/{documentTemplateId}/preview',
    })
}

export const getDocumentTemplateTypes = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetDocumentTemplateTypesResponse,
        GetDocumentTemplateTypesError,
        ThrowOnError
    >({
        ...options,
        url: '/documentTemplateType',
    })
}

export const assignDocumentTemplate = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AssignDocumentTemplateData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        AssignDocumentTemplateResponse,
        AssignDocumentTemplateError,
        ThrowOnError
    >({
        ...options,
        url: '/documentTemplateType/{documentType}/assignTemplate',
    })
}

export const addTask = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddTaskData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<AddTaskResponse, AddTaskError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}/task',
    })
}

export const getTasks = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetTasksData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetTasksResponse, GetTasksError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}/task',
    })
}

export const updateTask = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateTaskData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<UpdateTaskResponse, UpdateTaskError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}/task/{taskId}',
    })
}

export const deleteTask = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteTaskData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<DeleteTaskResponse, DeleteTaskError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}/task/{taskId}',
    })
}

export const getOpenTasksForUser = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetOpenTasksForUserData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetOpenTasksForUserResponse,
        GetOpenTasksForUserError,
        ThrowOnError
    >({
        ...options,
        url: '/user/{userId}/task',
    })
}

export const getBankAccounts = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<GetBankAccountsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetBankAccountsResponse,
        GetBankAccountsError,
        ThrowOnError
    >({
        ...options,
        url: '/bankAccount',
    })
}

export const addBankAccount = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddBankAccountData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        AddBankAccountResponse,
        AddBankAccountError,
        ThrowOnError
    >({
        ...options,
        url: '/bankAccount',
    })
}

export const updateBankAccount = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateBankAccountData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UpdateBankAccountResponse,
        UpdateBankAccountError,
        ThrowOnError
    >({
        ...options,
        url: '/bankAccount/{bankAccountId}',
    })
}

export const deleteBankAccount = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteBankAccountData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteBankAccountResponse,
        DeleteBankAccountError,
        ThrowOnError
    >({
        ...options,
        url: '/bankAccount/{bankAccountId}',
    })
}

export const getAssignedBankAccount = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<GetAssignedBankAccountData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetAssignedBankAccountResponse,
        GetAssignedBankAccountError,
        ThrowOnError
    >({
        ...options,
        url: '/assignedBankAccount',
    })
}

export const assignBankAccount = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AssignBankAccountData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        AssignBankAccountResponse,
        AssignBankAccountError,
        ThrowOnError
    >({
        ...options,
        url: '/assignedBankAccount',
    })
}

export const produceInvoicesForEventRegistrations = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<ProduceInvoicesForEventRegistrationsData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        ProduceInvoicesForEventRegistrationsResponse,
        ProduceInvoicesForEventRegistrationsError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/produceInvoices',
    })
}

export const getContacts = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<GetContactsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetContactsResponse, GetContactsError, ThrowOnError>({
        ...options,
        url: '/contact',
    })
}

export const addContact = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddContactData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<AddContactResponse, AddContactError, ThrowOnError>({
        ...options,
        url: '/contact',
    })
}

export const updateContact = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateContactData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<UpdateContactResponse, UpdateContactError, ThrowOnError>(
        {
            ...options,
            url: '/contact/{contactId}',
        },
    )
}

export const deleteContact = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteContactData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteContactResponse,
        DeleteContactError,
        ThrowOnError
    >({
        ...options,
        url: '/contact/{contactId}',
    })
}

export const getAssignedContact = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<GetAssignedContactData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetAssignedContactResponse,
        GetAssignedContactError,
        ThrowOnError
    >({
        ...options,
        url: '/assignedContact',
    })
}

export const assignContact = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AssignContactData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<AssignContactResponse, AssignContactError, ThrowOnError>(
        {
            ...options,
            url: '/assignedContact',
        },
    )
}

export const addWorkType = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddWorkTypeData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<AddWorkTypeResponse, AddWorkTypeError, ThrowOnError>({
        ...options,
        url: '/worktype',
    })
}

export const getWorkTypes = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetWorkTypesResponse, GetWorkTypesError, ThrowOnError>({
        ...options,
        url: '/worktype',
    })
}

export const updateWorkType = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateWorkTypeData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UpdateWorkTypeResponse,
        UpdateWorkTypeError,
        ThrowOnError
    >({
        ...options,
        url: '/worktype/{workTypeId}',
    })
}

export const deleteWorkType = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteWorkTypeData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteWorkTypeResponse,
        DeleteWorkTypeError,
        ThrowOnError
    >({
        ...options,
        url: '/worktype/{workTypeId}',
    })
}

export const addWorkShift = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddWorkShiftData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<AddWorkShiftResponse, AddWorkShiftError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}/workshift',
    })
}

export const getWorkShifts = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetWorkShiftsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetWorkShiftsResponse, GetWorkShiftsError, ThrowOnError>(
        {
            ...options,
            url: '/event/{eventId}/workshift',
        },
    )
}

export const updateWorkShift = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateWorkShiftData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UpdateWorkShiftResponse,
        UpdateWorkShiftError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/workshift/{workShiftId}',
    })
}

export const deleteWorkShift = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<DeleteWorkShiftData, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteWorkShiftResponse,
        DeleteWorkShiftError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/workshift/{workShiftId}',
    })
}

export const getWorkShiftsForUser = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetWorkShiftsForUserData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetWorkShiftsForUserResponse,
        GetWorkShiftsForUserError,
        ThrowOnError
    >({
        ...options,
        url: '/user/{userId}/workshift',
    })
}

export const getInvoices = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetInvoicesResponse, GetInvoicesError, ThrowOnError>({
        ...options,
        url: '/invoice',
    })
}

export const downloadInvoice = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        DownloadInvoiceResponse,
        DownloadInvoiceError,
        ThrowOnError
    >({
        ...options,
        url: '/invoice/{invoiceId}',
    })
}

export const setInvoicePaid = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<SetInvoicePaidData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        SetInvoicePaidResponse,
        SetInvoicePaidError,
        ThrowOnError
    >({
        ...options,
        url: '/invoice/{invoiceId}',
    })
}
