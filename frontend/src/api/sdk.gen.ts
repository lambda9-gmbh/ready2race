// This file is auto-generated by @hey-api/openapi-ts

import {createClient, createConfig, type OptionsLegacyParser} from '@hey-api/client-fetch'
import type {
    UserLoginData,
    UserLoginError,
    UserLoginResponse,
    CheckUserLoginError,
    CheckUserLoginResponse,
    UserLogoutError,
    UserLogoutResponse,
    AddEventData,
    AddEventError,
    AddEventResponse,
    GetEventsData,
    GetEventsError,
    GetEventsResponse,
    GetEventError,
    GetEventResponse2,
    UpdateEventData,
    UpdateEventError,
    UpdateEventResponse,
    DeleteEventError,
    DeleteEventResponse,
    AddEventDayData,
    AddEventDayError,
    AddEventDayResponse,
    GetEventDaysData,
    GetEventDaysError,
    GetEventDaysResponse,
    GetEventDayError,
    GetEventDayResponse2,
    UpdateEventDayData,
    UpdateEventDayError,
    UpdateEventDayResponse,
    DeleteEventDayError,
    DeleteEventDayResponse,
    AddRaceData,
    AddRaceError,
    AddRaceResponse,
    GetRacesData,
    GetRacesError,
    GetRacesResponse,
    GetRaceError,
    GetRaceResponse2,
    UpdateRaceData,
    UpdateRaceError,
    UpdateRaceResponse,
    DeleteRaceError,
    DeleteRaceResponse,
    AddNamedParticipantData,
    AddNamedParticipantError,
    AddNamedParticipantResponse,
    GetNamedParticipantsError,
    GetNamedParticipantsResponse,
    UpdateNamedParticipantData,
    UpdateNamedParticipantError,
    UpdateNamedParticipantResponse,
    DeleteNamedParticipantError,
    DeleteNamedParticipantResponse,
    AddRaceCategoryData,
    AddRaceCategoryError,
    AddRaceCategoryResponse,
    GetRaceCategoryError,
    GetRaceCategoryResponse,
    UpdateRaceCategoryData,
    UpdateRaceCategoryError,
    UpdateRaceCategoryResponse,
    DeleteRaceCategoryError,
    DeleteRaceCategoryResponse,
} from './types.gen'

export const client = createClient(createConfig())

export const userLogin = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UserLoginData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<UserLoginResponse, UserLoginError, ThrowOnError>({
        ...options,
        url: '/login',
    })
}

export const checkUserLogin = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        CheckUserLoginResponse,
        CheckUserLoginError,
        ThrowOnError
    >({
        ...options,
        url: '/login',
    })
}

export const userLogout = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<UserLogoutResponse, UserLogoutError, ThrowOnError>({
        ...options,
        url: '/login',
    })
}

export const addEvent = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddEventData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<AddEventResponse, AddEventError, ThrowOnError>({
        ...options,
        url: '/event',
    })
}

export const getEvents = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetEventsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetEventsResponse, GetEventsError, ThrowOnError>({
        ...options,
        url: '/event',
    })
}

export const getEvent = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetEventResponse2, GetEventError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}',
    })
}

export const updateEvent = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateEventData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<UpdateEventResponse, UpdateEventError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}',
    })
}

export const deleteEvent = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<DeleteEventResponse, DeleteEventError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}',
    })
}

export const addEventDay = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddEventDayData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<AddEventDayResponse, AddEventDayError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}/eventDay',
    })
}

export const getEventDays = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetEventDaysData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetEventDaysResponse, GetEventDaysError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}/eventDay',
    })
}

export const getEventDay = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetEventDayResponse2, GetEventDayError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}/eventDay/{eventDayId}',
    })
}

export const updateEventDay = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateEventDayData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UpdateEventDayResponse,
        UpdateEventDayError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/eventDay/{eventDayId}',
    })
}

export const deleteEventDay = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteEventDayResponse,
        DeleteEventDayError,
        ThrowOnError
    >({
        ...options,
        url: '/event/{eventId}/eventDay/{eventDayId}',
    })
}

export const addRace = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddRaceData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<AddRaceResponse, AddRaceError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}/race',
    })
}

export const getRaces = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<GetRacesData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetRacesResponse, GetRacesError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}/race',
    })
}

export const getRace = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).get<GetRaceResponse2, GetRaceError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}/race/{raceId}',
    })
}

export const updateRace = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateRaceData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<UpdateRaceResponse, UpdateRaceError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}/race/{raceId}',
    })
}

export const deleteRace = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<DeleteRaceResponse, DeleteRaceError, ThrowOnError>({
        ...options,
        url: '/event/{eventId}/race/{raceId}',
    })
}

export const addNamedParticipant = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddNamedParticipantData, ThrowOnError>,
) => {
    return (options?.client ?? client).post<
        AddNamedParticipantResponse,
        AddNamedParticipantError,
        ThrowOnError
    >({
        ...options,
        url: '/namedParticipant',
    })
}

export const getNamedParticipants = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetNamedParticipantsResponse,
        GetNamedParticipantsError,
        ThrowOnError
    >({
        ...options,
        url: '/namedParticipant',
    })
}

export const updateNamedParticipant = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateNamedParticipantData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UpdateNamedParticipantResponse,
        UpdateNamedParticipantError,
        ThrowOnError
    >({
        ...options,
        url: '/namedParticipant/{namedParticipantId}',
    })
}

export const deleteNamedParticipant = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteNamedParticipantResponse,
        DeleteNamedParticipantError,
        ThrowOnError
    >({
        ...options,
        url: '/namedParticipant/{namedParticipantId}',
    })
}

export const addRaceCategory = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<AddRaceCategoryData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        AddRaceCategoryResponse,
        AddRaceCategoryError,
        ThrowOnError
    >({
        ...options,
        url: '/raceCategory',
    })
}

export const getRaceCategory = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetRaceCategoryResponse,
        GetRaceCategoryError,
        ThrowOnError
    >({
        ...options,
        url: '/raceCategory',
    })
}

export const updateRaceCategory = <ThrowOnError extends boolean = false>(
    options: OptionsLegacyParser<UpdateRaceCategoryData, ThrowOnError>,
) => {
    return (options?.client ?? client).put<
        UpdateRaceCategoryResponse,
        UpdateRaceCategoryError,
        ThrowOnError
    >({
        ...options,
        url: '/raceCategory/{raceCategoryId}',
    })
}

export const deleteRaceCategory = <ThrowOnError extends boolean = false>(
    options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
    return (options?.client ?? client).delete<
        DeleteRaceCategoryResponse,
        DeleteRaceCategoryError,
        ThrowOnError
    >({
        ...options,
        url: '/raceCategory/{raceCategoryId}',
    })
}
